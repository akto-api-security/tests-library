id: AUTH0_REDIRECT_URI_STATE_SSRF
info:
  name: "SSRF test for Redirect URI with State Parameter in Auth0 Authentication"
  description: "An SSRF test for Redirect URI with the state parameter in Auth0 authentication evaluates how the system handles and validates redirect URIs that include SSRF payloads within the state parameter. Testers aim to determine if the system allows internal or unintended requests through crafted state values, which could trick the server into accessing internal resources or sensitive endpoints. This test ensures that Auth0 properly sanitizes and validates the state parameter to prevent unauthorized access or exposure of internal services."
  details: "In an SSRF test for Redirect URI with the state parameter, testers inject payloads into the `state` parameter of an OAuth2 authorization request to see if Auth0 processes them in a way that could lead to internal requests. For example, by using URLs that point to internal services or localhost within the `state` parameter, testers check if Auth0 improperly redirects or accesses internal resources. This helps assess whether Auth0’s validation mechanisms are robust enough to prevent SSRF vulnerabilities via the state parameter."
  impact: "If an SSRF vulnerability is found in the Redirect URI with the state parameter, attackers could trick Auth0 into making requests to internal services or accessing sensitive data within the network. This could lead to unauthorized information disclosure or exposure of internal systems. Additionally, it might enable further attacks or exploitation of internal resources, compromising overall system security and user privacy."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: AUTH0_REDIRECT_URI_STATE_SSRF
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa7-server-side-request-forgery.md"
    - "https://www.akto.io/blog/how-to-prevent-server-side-request-forgery-ssrf-as-a-developer"
  cwe:
    - CWE-918
  cve:
    - CVE-2022-4725

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR § 164.312(c)(1)
    - 45 CFR § 164.312(e)(1)
  SOC 2:
    - System and Communication Security
    - Secure Application Development Controls
  PCI DSS:
    - Requirement 6.5.9
    - Requirement 11.3
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SC-7
    - SI-10
  CSA CCM:
    - IVS-09
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 9.4
    - IG2 Safeguard 18.3
  FedRAMP:
    - SC-7
    - SI-10
  NIST 800-171:
    - 3.1.20
    - 3.14.2
  FISMA:
    - SC-7
    - SI-10
  Cybersecurity Maturity Model Certification (CMMC):
    - SC.3.192
    - SI.2.216
api_selection_filters:
  method:
    eq: "GET"
  response_code:
    eq: 302
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  url:
    contains_all:
      - authorize
      - auth0
  query_param:
    for_one:
      key:
        eq: state
        extract: stateKey
execute:
  type: single
  requests:
    - req:
        - send_ssrf_req:
            url: "https://test-services.akto.io/store_uuid/${random_uuid}"
        - modify_query_param:
            stateKey: "maliciousToken123%26redirect_uri%3Dhttps%3A%2F%2Ftest-services.akto.io%2F%24%7Brandom_uuid%7D"
validate:
  response_code:
    eq: 302
  ssrf_url_hit: ${random_uuid}
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
