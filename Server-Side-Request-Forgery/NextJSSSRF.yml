id: NEXT_JS_SSRF
info:
  name: "Next.JS Server-Side Request Forgery Test"
  description: "The Next.js Server-Side Request Forgery (SSRF) Test identifies vulnerabilities in a Next.js application that may allow an attacker to make unauthorized requests from the server to internal or external resources. SSRF vulnerabilities occur when an attacker can manipulate the server to send requests to unintended targets, often bypassing security controls. This could lead to information leakage, internal network attacks, or exploitation of internal services. Proper validation of user input and restricting server-side network access are essential to mitigate SSRF risks in Next.js applications."
  details: "The Next.js Server-Side Request Forgery (SSRF) Test examines how a Next.js application handles external or internal requests made by the server. If the application improperly processes user inputs that are used in server-side requests, an attacker could manipulate the input to trigger requests to internal services, cloud metadata APIs, or other unintended destinations. These unauthorized requests could expose sensitive information, allow internal network access, or trigger malicious actions. Mitigating SSRF in Next.js involves validating and sanitizing user inputs, using safe URLs, and restricting server access to sensitive internal endpoints."
  impact: "The impact of a Next.js Server-Side Request Forgery (SSRF) vulnerability can be severe, as it allows attackers to make unauthorized requests from the server to internal or external systems. This could lead to the exposure of sensitive internal data, such as cloud metadata, internal APIs, or private services. Exploiting SSRF may also facilitate further attacks, such as accessing internal network resources or launching attacks on other services. Effective input validation, request whitelisting, and network access restrictions are crucial to prevent such risks."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: NEXT_JS_SSRF
  severity: MEDIUM
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa7-server-side-request-forgery.md"
    - "https://www.akto.io/blog/how-to-prevent-server-side-request-forgery-ssrf-as-a-developer"
    - "https://www.cobalt.io/blog/from-ssrf-to-port-scanner"
  cwe:
    - CWE-918
  cve:
    - CVE-2021-28169

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.312(e)(1)
  SOC 2:
    - System and Communication Security
    - Secure Application Development Controls
  PCI DSS:
    - Requirement 6.5.9
    - Requirement 11.3
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SC-7
    - SI-10
  CSA CCM:
    - IVS-09
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 9.4
    - IG2 Safeguard 18.3
  FedRAMP:
    - SC-7
    - SI-10
  NIST 800-171:
    - 3.1.20
    - 3.14.2
  FISMA:
    - SC-7
    - SI-10
  Cybersecurity Maturity Model Certification (CMMC):
    - SC.3.192
    - SI.2.216
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
execute:
  type: single
  requests:
    - req:
        - send_ssrf_req:
            url: "https://test-services.akto.io/store_uuid/${random_uuid}"
        - modify_method: GET
        - modify_url: "/_next/image?w=16&q=10&url=https://test-services.akto.io/${random_uuid}"
        - replace_body: '{}'


validate:
  response_code:
    eq: 200
  ssrf_url_hit: ${random_uuid}
  response_payload:
    contains_either: "The requested resource isn't a valid image"
