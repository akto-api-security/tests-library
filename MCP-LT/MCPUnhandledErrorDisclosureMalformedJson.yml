---
id: MCP_UNHANDLED_ERROR_DISCLOSURE_MALFORMED_JSONRPC
info:
  name: Unhandled Error Disclosure by Passing malformed JSON RPC payload
  description: |
    This test checks whether the MCP server discloses raw stack traces or internal error messages
    (e.g., `SyntaxError`, `body-parser`, `raw-body`, `express` stack frames) directly to the MCP client.
    Such disclosures may reveal sensitive implementation details that can be exploited for further attacks.
  details: |
    The test sends malformed JSON payloads to the MCP server.
    If the response contains detailed stack traces, internal library names, or error messages,
    it indicates that the MCP server does not sanitize error responses before returning them to clients.
    Attackers can use this information to craft targeted exploits.
  impact: |
    Attackers gain knowledge of the underlying frameworks (`express`, `body-parser`, `raw-body`),
    precise file paths, and error handling flaws.
    This increases the risk of injection, DoS, or targeted exploitation of known vulnerabilities in exposed components.
  category:
    name: MCP
    shortName: MCP
    displayName: Model Context Protocol (MCP) Security
  subCategory: MCP_UNHANDLED_ERROR_DISCLOSURE_MALFORMED_JSONRPC
  severity: MEDIUM
  tags:
  - information_disclosure
  - error_handling
  - stack_trace
  - mcp_security
  references:
  - https://owasp.org/www-community/Improper_Error_Handling
  - https://cwe.mitre.org/data/definitions/209.html
  - https://portswigger.net/kb/issues/00600400_server-errors
  cwe:
  - CWE-209
  cve: []
attributes:
  nature: NON_INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: POST
  request_payload:
    contains_all:
    - method
    - id
    - jsonrpc
    for_one:
      extract: requestBody
wordLists:
  malformedPayload:
  - "{"
execute:
  type: single
  requests:
  - req:
      replace_body: "${malformedPayload}${requestBody}"
validate:
  response_payload:
  - magic_validate: "Analyze the response to determine if it exposes stack traces, codebase file paths, dependency versions, underlying libraries, library-related errors, or any low-level system/debug errors not intended for external exposure. If none of these are present and the error is generic, do not flag as vulnerable."
