id: NOSQLI_BOOLEAN_BASED_REPLACE_BODY_OBJECT
info:
  name: "Boolean Based NoSQL Injection test by replacing JSON body with Object"
  description: >
    "Boolean-based NoSQL injection testing by replacing the JSON body with an object involves injecting malicious objects into the query to manipulate its logical evaluation. For example, replacing a JSON parameter with an object tests if the application correctly handles and sanitizes such inputs. If the query returns unintended results, it indicates a vulnerability. This method helps identify weaknesses in the application's input validation, potentially exposing the system to unauthorized data access and manipulation."
  details: >
    "Boolean-based NoSQL injection testing by replacing the JSON body with an object involves substituting a JSON field with an object that changes the query logic. For instance, injecting object can alter the query to return all records where the field is not empty. This tests the application's ability to handle and sanitize complex object inputs. If the query behavior changes as a result, it indicates a vulnerability, highlighting the need for robust input validation to prevent unauthorized data access and potential data manipulation."
  impact: >
    "The impact of Boolean-based NoSQL injection testing by replacing the JSON body with an object can be significant. If the application is vulnerable, attackers can manipulate queries to bypass filters, access sensitive data, and perform unauthorized actions. This can lead to data breaches, loss of data integrity, and exposure of confidential information. Identifying such vulnerabilities underscores the importance of proper input validation and sanitization to safeguard against injection attacks and ensure the security and integrity of the application."
  category:
    name: INJECT
    shortName: Injection Attacks
    displayName: Injection Attacks (INJECT)
  subCategory: NOSQLI_BOOLEAN_BASED_REPLACE_BODY_OBJECT
  severity: CRITICAL
  tags:
    - Injection Attack
    - OWASP Top 10
    - HackerOne Top 10
  references:
    - "https://github.com/Charlie-belmer/nosqli"
    - "https://owasp.org/www-community/Injection_Flaws"
  cwe:
    - CWE-943
    - CWE-89
  cve:
    - CVE-2020-35847
    - CVE-2021-22911
    - CVE-2023-28359

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST


api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

  method:
    not_contains:
      - OPTIONS
      - GET
execute:
  type: multiple
  requests:
    - req:
        - replace_body: "{ \"$where\" : \"return false\" }"
        - validate:
            or:
              - response_code:
                  gte: 400
                  lt: 410
              - response_payload:
                  length:
                    gt: 0
                  not_contains:
                    - Error
                    - fail
                    - invalid
                    - expired
                    - not found
                    - account is locked
                    - account is blocked
                    - rate-limit
                    - rate_limit
                    - rate limit
                    - multiple failed attempt
                    - cloudflare
                    - <html>
                    - </html>
        - success: x2
        - failure: exit
    - req:
        - replace_body: "{ \"$where\" : \"return true\" }"
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              neq: "${x1.response.body}"
              not_contains:
                - rate-limit
                - rate limit
                - rate_limit
                - account is locked
                - account is blocked
                - multiple failed attempt
                - cloudflare
                - invalid
                - fail
                - <html>
                - </html>
        - success: x3
        - failure: exit
    - req:
        - add_header:
            dummyHeader: dummyValue
        - replace_body: "{ \"$where\" : \"1 == 1\" }"
        - validate:
            response_payload:
              length:
                gt: 0
              eq: "${x2.response.body}"
              not_contains:
                - rate-limit
                - rate limit
                - rate_limit
                - account is locked
                - account is blocked
                - multiple failed attempt
                - cloudflare
                - invalid
                - fail
                - <html>
                - </html>
        - success: vulnerable
        - failure: exit
