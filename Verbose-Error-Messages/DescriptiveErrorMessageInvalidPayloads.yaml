id: DESCRIPTIVE_ERROR_MESSAGE_INVALID_PAYLOAD
info:
  name: Descriptive Error Message Using invalid payloads
  description: "Verifies error messages for sensitive information leakage, specifically preventing the exposure of stack traces, enhancing application security."
  details: >
          "The DESCRIPTIVE_ERROR_MESSAGE test ensures that error messages do not leak sensitive information, specifically avoiding the exposure of stack traces. 
          It verifies that error messages provide useful and informative feedback without disclosing implementation details, reducing the risk of exposing vulnerabilities and aiding in maintaining the security and integrity of the application."
  impact: "This information can be used to facilitate more sophisticated attacks on your application"
  remediation: "To address the issue of descriptive error messages revealing sensitive information when using invalid payloads, implement generic error messages that do not disclose specific details about the application's internals. Instead of providing detailed error messages, use generic responses such as "Invalid input" or "An error occurred, please try again later." Additionally, ensure that error messages do not contain stack traces or debugging information that could aid attackers in exploiting vulnerabilities. Regularly review and test error handling mechanisms to ensure they effectively protect against information disclosure and maintain the security of the application."
  category:
    name: VEM
    shortName: VEM
    displayName: Verbose Error Messages (VEM)
  subCategory: DESCRIPTIVE_ERROR_MESSAGE_INVALID_PAYLOAD
  severity: LOW
  tags: 
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-community/Improper_Error_Handling"
  cwe:
    - CWE-209
    - CWE-200
  cve:
    - CVE-2020-11883
    - CVE-2020-15652

api_selection_filters:
  method:
    contains_either:
      - "PUT"
      - "POST"
      - "PATCH"
  response_payload:
    not_contains:
      - column
      - row
      - line
      - function
      - class
      - stacktrace

execute:
  type: single
  requests:
    - req:
      - replace_body: "random payload containing 5s3c1@al characters and emojisðŸ˜Š"
validate:
  or:
      - response_payload: # Javascript / Node.js errors
          - contains_either:
              - "TypeError: Cannot"
              - "SyntaxError: Unexpected"
              - "ReferenceError:"
      - response_payload: # Python errors
          - contains_either:
              - "ValueError: invalid"
              - "TypeError: unsupported"
              - "KeyError: "
      - response_payload: # Java errors
          - contains_either:
              - "java.lang.NullPointerException"
              - "java.lang.ArrayIndexOutOfBoundsException"
              - "java.lang.IllegalArgumentException"
      - response_payload: # C# errors
          - contains_either:
              - "System.NullReferenceException"
              - "System.IndexOutOfRangeException"
              - "System.InvalidOperationException"
      - response_payload: # PHP errors
          - contains_either:
              - "Fatal error: Call"
              - "Parse error: syntax error"
              - "Exception: "
      - response_payload: # Ruby errors
          - contains_either:
              - "RuntimeError: "
              - "NoMethodError: "
              - "ArgumentError: "
      - response_payload: # Go errors
          - contains_either:
              - "panic: runtime error"