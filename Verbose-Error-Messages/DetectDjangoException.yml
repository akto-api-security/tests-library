id: DETECT_DJANGO_EXCEPTION
info:
  name: "API Exception Error Detection for Django using Special Characters"
  description: "This vulnerability focuses on identifying API-related exceptions within Django applications by utilizing special characters as markers or delimiters. This approach helps flag error-specific responses, making them easier to parse and diagnose. By setting these characters in error messages or log outputs, developers can efficiently track and handle exceptions, improving error handling and debugging."
  details: "This technique involves embedding unique special characters in API error messages within Django, enabling quicker detection and categorization of exceptions. By assigning specific characters to different types of errors, the application can systematically parse logs, identify error patterns, and trigger targeted responses or alerts. This method not only simplifies troubleshooting but also enhances log readability and automates parts of the debugging process."
  impact: "Using special characters for API exception detection in Django can significantly streamline error tracking, allowing for faster identification and resolution of issues. This approach minimizes manual log parsing, helping developers focus on high-priority bugs while improving system reliability. Enhanced error visibility also supports proactive troubleshooting, leading to better performance and a more stable user experience."
  category:
    name: VEM
    shortName: Verbose Error Messages
    displayName: Verbose Error Messages (VEM)
  subCategory: DETECT_DJANGO_EXCEPTION
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-community/Improper_Error_Handling"
  cwe:
    - CWE-209
    - CWE-200
  cve:
    - CVE-2020-11883
    - CVE-2020-15652
settings:
  nature: INTRUSIVE
  plan: STANDARD
wordLists:
  specialCharacters:
    - "aaaa"
    - "1234fsfddfg"
    - "^^^6"
    - "*&***8"
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: "OPTIONS"
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_payload:
    for_one:
      key:
        regex: "id"
        extract: keyVar
execute:
  type: single
  requests:
    - req:
        - modify_body_param:
            keyVar: ${specialCharacters}
validate:
  response_payload:
    length:
      gt: 0
    contains_all:
      - "django version"
      - "python3"
      - "/usr/local/bin/"
