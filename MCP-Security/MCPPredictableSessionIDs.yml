---
id: MCP_PREDICTABLE_SESSION_IDS
info:
  name: Predictable Session ID Detection (MCP)
  description: |
    Detects if the MCP server generates predictable or sequential session identifiers that can be guessed.
  details: |
    According to MCP Security Best Practices, if sessions are used (which they shouldn't be), "Generated session IDs 
    (e.g., UUIDs) SHOULD use secure random number generators. Avoid predictable or sequential session identifiers 
    that could be guessed by an attacker." This test checks if session IDs follow predictable patterns such as:
    - Sequential numbers (session_1, session_2, etc.)
    - Timestamps
    - Simple incremental values
    - Short or weak identifiers
    Predictable session IDs can be enumerated by attackers to hijack other users' sessions.
  impact: |
    Predictable session IDs allow attackers to enumerate valid session identifiers and hijack user sessions without 
    needing to intercept actual traffic. An attacker can systematically guess session IDs and gain unauthorized 
    access to multiple user accounts, leading to large-scale data breaches and account compromise.
  category:
    name: MCP_AUTH
    shortName: MCP_AUTH
    displayName: Model Context Protocol (MCP) Security - Broken Authentication
  subCategory: MCP_PREDICTABLE_SESSION_IDS
  severity: CRITICAL
  tags:
  - MCP Security
  - Session Management
  - Weak Cryptography
  - Predictable Values
  references:
  - https://modelcontextprotocol.io/specification/2025-06-18/basic/security_best_practices#session-hijacking
  - https://owasp.org/www-community/vulnerabilities/Insufficient_Session-ID_Length
  - https://cwe.mitre.org/data/definitions/330.html
  cwe:
  - CWE-330
  - CWE-338
  - CWE-340
  cve:
  - CVE-2022-24834
attributes:
  nature: NON_INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
execute:
  type: multiple
  requests:
  - req:
    - modify_body_param:
        id: 1
  - req:
    - modify_body_param:
        id: 2
  - req:
    - modify_body_param:
        id: 3
validate:
  or:
  - response_headers:
      for_one:
        key:
          regex: (?i)(set-cookie|x-session)
        value:
          regex: (?i)(session|sid)=(0x)?[0-9]{1,10}($|;)
  - response_payload:
      regex: (?i)("session_?id":\s*"?[0-9]{1,10}"?|"session_?token":\s*"?[0-9]{1,10}"?)
  - response_headers:
      for_one:
        key:
          regex: (?i)(set-cookie|x-session)
        value:
          length:
            lt: 20
