---
id: DATE_FIELD_DOS_MCP
info:
  name: Denial of Service Test on Date Fields in MCP Servers Using Extreme Values
  description: |
    This Denial of Service (DoS) test targets MCP servers by injecting extreme values into date-type fields within the `params.arguments` payload. It evaluates the server's resilience and robustness in handling large or malformed date inputs.
  details: |
    The test sends extreme date inputs to parameters inside `params.arguments` to check how the MCP server handles edge-case date processing. These values include invalid leap dates, out-of-range dates, and large timestamp values. The test aims to reveal performance issues or vulnerabilities in the parsing logic.
  impact: |
    Improper handling of extreme date inputs can cause high CPU utilization, long processing times, or crashes. This compromises the reliability and availability of the MCP server, potentially opening the door to denial-of-service attacks.
  category:
    name: MCP_DOS
    shortName: MCP_DOS
    displayName: Model Context Protocol (MCP) Security - Denial of Service
  subCategory: DATE_FIELD_DOS_MCP
  severity: HIGH
  tags:
  - Business logic
  - OWASP top 10
  - HackerOne top 10
  references:
  - https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md
  cwe:
  - CWE-400
  cve:
  - CVE-2023-4647
  - CVE-2023-38254
attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: SLOW
api_selection_filters:
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
    - params
  or:
  - request_payload:
      for_one:
        key:
          contains_either: "$magic From the request body, locate the `params` object. Inside `params`, locate the `arguments` object if it exists. Select any one key inside `arguments` whose value is either a string, number, decimal or boolean. If found then return the selected key. Else return empty braces []. Do not select the key `name`"
          extract: userKey
  - request_payload:
      for_one:
        key:
          contains_either:
          - startDate
          - endDate
          - start_date
          - end_date
          - fromDate
          - toDate
          - from_date
          - to_date
          - beginDate
          - finishDate
          - begin_date
          - finish_date
          - dateStart
          - dateEnd
          - date_start
          - date_end
          - periodStart
          - periodEnd
          - period_start
          - period_end
          - rangeStart
          - rangeEnd
          - range_start
          - range_end
          - startTime
          - endTime
          - start_time
          - end_time
          - reportStart
          - reportEnd
          - report_start
          - report_end
          - date
          extract: userKey
wordLists:
  explodingDates:
  - "0000-01-01"
  - "9999-12-31"
  - "2020-02-29"
  - "1900-02-29"
  - "2020-00-00"
  - "2020-01-32"
  - "2020-13-01"
  - "12/31/9999"
  - "02/29/2020"
  - "02/29/1900"
  - "00/00/2020"
  - "01/32/2020"
  - "13/01/2020"
  - "31/12/9999"
  - "29/02/2020"
  - "29/02/1900"
  - "-62135596800"
  - "253402300799"
  - "2020-02-29T23:59:60Z"
  - "2020-02-29T24:01:00Z"
  - "2020-13-01T00:00:00Z"
  - "2020-01-32T00:00:00Z"
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: dummyValue
    - validate:
        response_payload:
          percentage_match:
            gte: 90
    - success: x2
    - failure: exit
  - req:
    - modify_body_param:
        userKey: "${explodingDates}"
    - validate:
        response_code:
          gt: 505
validate:
  and:
  - compare_greater:
    - "${x2.response.stats.median_response_time}"
    - 5001
  - compare_greater:
    - "${x2.response.stats.median_response_time}"
    - "${x1.response.stats.median_response_time} * 5"
