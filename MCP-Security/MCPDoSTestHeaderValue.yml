id: DOS_HEADER_VALUE_MCP
info:
  name: "Denial of Service test by entering long and random strings in Header Parameter Values (MCP)"
  description: "In this Denial of Service (DoS) test, lengthy and randomized strings are injected into the Header Parameter Values. By overwhelming the system with such inputs, testers assess how the application handles excessive data loads in key-value pairs. This evaluation helps uncover potential vulnerabilities and weaknesses in the system's parsing and processing capabilities, aiding in the fortification against DoS attacks."
  details: "In this testing scenario, the focus lies on manipulating Header Parameter Values by injecting lengthy and random strings. By inundating the system with such inputs, testers analyze how the application manages the parsing and processing of these parameters. This method aims to uncover vulnerabilities in key handling mechanisms, providing insights into potential weaknesses that malicious actors could exploit to disrupt the system's functionality through Denial of Service (DoS) attacks."
  impact: "The impact of successful Denial of Service (DoS) attacks via manipulation of Header Parameter Values can be significant. It may result in system slowdowns, unresponsiveness, or complete service outages, disrupting normal operations. Additionally, such attacks could compromise the availability and reliability of the system, leading to financial losses and reputational damage due to the perception of inadequate security measures."
  category:
    name: MCP
    shortName: MCP
    displayName: Model Context Protocol (MCP) Security
  subCategory: DOS_HEADER_VALUE_MCP
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: SLOW


api_selection_filters:
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
    - params
  response_code:
    gte: 200
    lt: 300

  request_headers:
    for_one:
      key:
        regex: "^(?![Hh]ost$).+"
        extract: headerKey
wordLists:
  headerParamValues:

    - "; : ! @ # $ % ^ & * ( ) < > ? | { } [ ] ~"
    - "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"
    - "你好你好你好你好你好你好你好你好你好你好你好"
    - "\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"
    - "😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇"
    - "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
execute:
  type: multiple
  requests:
    - req:
        - add_header:
            dummy_Header_Key: "dummyValue"
        - validate:
            response_payload:
              percentage_match:
                gte: 90
              not_contains:
                - Error
                - Internal Server
                - Failed
                - Unauthorized
                - access denied
                - Forbidden
                - Method Not allowed
                - Gateway timeout
                - request timeout
                - server error
                - server busy
                - authentication error
                - authorization error
                - validation error
                - Permission Denied
                - invalid token
                - token expired
                - session expired
                - session timeout
                - unexpected error
                - unable to process request
                - bad request
                - service unavailable
                - account is locked
                - account is blocked
                - multiple failed attempts
                - "NotAuthenticated"
        - success: x2
        - failure: exit
    - req:
        - modify_header:
            headerKey: ${headerParamValues}
        - validate:
            response_code:
              gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 5001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 5
strategy:
  run_once: /