---
id: MCP_BREAKING_JSON_PARSING
info:
  name: Breaking JSON Parsing (MCP)
  description: "This test checks whether MCP servers robustly handle unexpected or control characters in JSON input. It evaluates the parser’s resilience when special values like null bytes, invalid Unicode, or control characters are prepended to valid JSON content, identifying risks that could lead to parsing issues or input validation bypasses."
  details: "The test sends API requests with JSON payloads that prepend various special characters — such as null bytes ('\\0'), invalid Unicode sequences, or control characters — to valid JSON content (`userBody`). This helps detect whether the application’s JSON parser or request preprocessing logic is vulnerable to input parsing issues or can be tricked into misinterpreting the payload. The test does not use malformed JSON structures, but focuses on injecting control data that could exploit weak parsers or insufficient input sanitization."
  impact: "Failure to handle special or unexpected characters in JSON payloads can lead to parsing anomalies, denial of service, or bypass of validation logic. An attacker may exploit these weaknesses to disrupt normal operation, trigger unhandled exceptions, or evade input validation. Ensuring strict and predictable JSON parsing is critical to maintaining application stability and security."
  category:
    name: MCP_INPUT_VALIDATION
    shortName: MCP_INPUT_VALIDATION
    displayName: Model Context Protocol (MCP) Security - Input Validation
  subCategory: MCP_BREAKING_JSON_PARSING
  severity: LOW
  tags:
  - Business logic
  - OWASP top 10
  - HackerOne top 10
  references:
  - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
  - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
  - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
  - CWE-20
  cve:
  - CVE-2018-20679
  - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: POST
  and:
  - request_payload:
      for_one:
        extract: userBody
  - request_payload:
      for_one:
        key:
          regex: .*
  - request_payload:
      contains_all:
      - jsonrpc
      - method
      - params
wordLists:
  attemptValues:
  - "\0"
  - "\ufffe"
  - "\uffff"
  - "null"
  - undefined
  - "{"
  - "}"
  - "["
  - "]"
  - NaN
  - "\x1f"
  - "\x7f"
  - "\x81"
  - "\ud800"
  - "\udbff"
  - "\udc00"
  - "\udfff"
  - �
  - <script>
  - \u0022
  responseErrorList:
  - Error
  - Internal Server
  - Failed
  - Unauthorized
  - access denied
  - Forbidden
  - Method Not allowed
  - Gateway timeout
  - request timeout
  - server error
  - server busy
  - authentication error
  - authorization error
  - validation error
  - Permission Denied
  - invalid token
  - token expired
  - session expired
  - session timeout
  - unexpected error
  - unable to process request
  - bad request
  - service unavailable
  - account is locked
  - account is blocked
  - multiple failed attempts
  - Attention Required!
  - CloudFlare
  - "Sorry, you have been blocked"
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        x-akto-ignore: 123
    - replace_body: "{}"
    - validate:
        response_code:
          gte: 200
          lt: 300
        response_payload:
          length:
            gt: 0
          not_contains: "${responseErrorList}"
    - success: exit
    - failure: x2
  - req:
    - add_header:
        x-akto-ignore: 123
    - replace_body: "${attemptValues}${userBody}"
    - validate:
        response_code:
          gte: 200
          lt: 300
        response_payload:
          not_contains: "${responseErrorList}"
    - success: vulnerable
    - failure: exit
