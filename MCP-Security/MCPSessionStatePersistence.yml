---
id: MCP_SESSION_STATE_PERSISTENCE
info:
  name: Session State Persistence Detection (MCP)
  description: |
    Detects if the MCP server maintains stateful sessions between requests instead of being stateless.
  details: |
    MCP servers should be completely stateless, with each request containing all necessary authentication 
    and authorization information. This test checks if the server behavior changes based on prior requests 
    (indicating session state) versus treating each request independently. The test makes multiple requests 
    and analyzes if removing cookies or authentication between requests affects the response, which would 
    indicate improper session state management.
  impact: |
    Stateful session management violates MCP architecture principles and enables session-based attacks including 
    session hijacking, session fixation, and CSRF. It also creates scalability issues and makes it difficult to 
    properly audit and monitor user actions, as the server maintains hidden state rather than explicitly 
    authorizing each request.
  category:
    name: MCP_AUTH
    shortName: MCP_AUTH
    displayName: Model Context Protocol (MCP) Security - Broken Authentication
  subCategory: MCP_SESSION_STATE_PERSISTENCE
  severity: HIGH
  tags:
  - MCP Security
  - Session Management
  - Stateful Authentication
  - Architecture Violation
  references:
  - https://modelcontextprotocol.io/specification/2025-06-18/basic/security_best_practices#session-hijacking
  - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html
  cwe:
  - CWE-384
  - CWE-664
attributes:
  nature: NON_INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
execute:
  type: multiple
  requests:
  - req:
    - modify_body_param:
        id: 1
  - req:
    - modify_body_param:
        id: 2
    - remove_auth_header: true
validate:
  response_payload:
    contains_either: "$magic Compare the two responses. If both responses are successful (no auth errors) and contain similar data despite second request having no authentication, return list of words from both responses. If second response has authentication error, return empty braces []."

