---
id: COMMAND_INJECTION_BY_PASSING_EXTRA_VALUES_MCP
info:
  name: Command Injection By passing extra values (MCP)
  description: |
    This test evaluates the system's resistance to command injection vulnerabilities by attempting to pass command-line arguments as input values. It simulates scenarios where a user might supply input such as `1.1.1.1 -oN /tmp/attack.txt`, which could be interpreted by the backend system as a shell command or command-line option.
  details: |
    "The test modifies a request parameter to include values resembling command-line instructions (e.g., `1.1.1.1 -oN /tmp/attack.txt`) that might be interpreted as part of a command execution routine if the server improperly constructs shell or subprocess calls. \nFor instance, if the application uses this parameter directly in a shell command (e.g., `ping ${userInput}` or `nmap ${userInput}`), an attacker can inject flags or file paths and cause unauthorized execution, file creation, or information disclosure.\nThe test first verifies that the original request does not result in errors. Then, it injects the suspicious input and checks if the behavior changes â€” indicating a possible command execution."
  impact: |
    If the application fails to sanitize user input before passing it to command execution routines, it can result in command injection, leading to arbitrary command execution, file creation, or system compromise. Attackers can exploit such vulnerabilities to exfiltrate data, damage system integrity, or escalate privileges.
  category:
    name: MCP
    shortName: MCP
    displayName: Model Context Protocol (MCP) Security
  subCategory: COMMAND_INJECTION_BY_PASSING_EXTRA_VALUES_MCP
  severity: HIGH
  tags:
  - Business logic
  - OWASP top 10
  - HackerOne top 10
  references:
  - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
  - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
  - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
  - CWE-77
  cve:
  - CVE-2023-25826
  - CVE-2023-41031
attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
    - params
    for_one:
      key:
        contains_either: "$magic From the request body, locate the `params` object. Inside `params`, locate the `arguments` object if it exists. Select any one key inside `arguments` whose value is either a string, number, decimal or boolean. If found then return the selected key. Else return empty braces []. Do not select the key `name`"
        extract: userKey
      value:
        datatype: string
        extract: userVal
wordLists:
  responseErrorList:
  - Error
  - Internal Server
  - Failed
  - Unauthorized
  - access denied
  - Forbidden
  - Method Not allowed
  - Gateway timeout
  - request timeout
  - server error
  - server busy
  - authentication error
  - authorization error
  - validation error
  - Permission Denied
  - invalid token
  - token expired
  - session expired
  - session timeout
  - unexpected error
  - unable to process request
  - bad request
  - service unavailable
  - account is locked
  - account is blocked
  - multiple failed attempts
  - Attention Required!
  - CloudFlare
  - "Sorry, you have been blocked"
execute:
  type: multiple
  requests:
  - req:
    - delete_body_param: "${userKey}"
    - validate:
        response_code:
          gte: 200
          lt: 300
        response_payload:
          length:
            gt: 0
          not_contains: "${responseErrorList}"
    - success: exit
    - failure: x2
  - req:
    - modify_body_param:
        userKey: nmap 1.1.1.1 -oN /tmp/attack.txt
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    contains_either: "$magic Analyze the response and check if the server attempted to run the command 1.1.1.1 -oN /tmp/attack.txt or not. If the server didn't ran the coomand then return contains_either: []. Else return contains_either: [<word1>, <word2>, ....]"
