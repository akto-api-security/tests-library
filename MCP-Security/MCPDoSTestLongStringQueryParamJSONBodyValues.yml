id: DOS_QUERY_PARAM_JSON_BODY_VALUES_MCP
info:
  name: "Denial of Service test by entering long and random strings in Query Param or JSON Body Param Values (MCP)"
  description: "This test involves intentionally overwhelming a system's resources to disrupt its normal functioning. This particular method focuses on input fields such as Query Parameters or JSON Body Parameters, where long and random strings are entered to assess how the system handles excessive data loads. By simulating such attacks, developers can gauge the system's resilience against potential DoS vulnerabilities."
  details: "In this type of Denial of Service (DoS) test, the system is subjected to excessive loads by inputting unusually long and random strings into Query Parameters or JSON Body Parameters. The aim is to observe how the system responds under such stress, identifying potential vulnerabilities that attackers could exploit to disrupt its normal operation. By conducting these tests, developers can proactively strengthen the system's defenses against DoS attacks."
  impact: "The impact of a successful Denial of Service (DoS) attack using long and random strings in Query Parameters or JSON Body Parameters can be severe. It may lead to system slowdowns, unresponsiveness, or even complete service outage, disrupting operations and causing financial losses. Furthermore, such attacks can tarnish the organization's reputation, eroding trust among users and stakeholders due to the perceived lack of robustness in their systems."
  category:
    name: MCP_DOS
    shortName: MCP_DOS
    displayName: Model Context Protocol (MCP) Security - Denial of Service
  subCategory: DOS_QUERY_PARAM_JSON_BODY_VALUES_MCP
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: SLOW


api_selection_filters:
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
    - params
  response_code:
    gte: 200
    lt: 300

  or:
    - request_payload:
        for_one:
          key:
            contains_either: "$magic From the request body, locate the `params` object. Inside `params`, locate the `arguments` object if it exists. Select any one key inside `arguments` whose value is a primitive (string, number, boolean). Do not select keys whose values are arrays or objects. Do not select the key `name`. Return the selected key."            
          extract: userKey
    - query_param:
        for_one:
          key:
            regex: ".*"
            extract: userKey
wordLists:
  queryParamValues:

    - "; : ! @ # $ % ^ & * ( ) < > ? | { } [ ] ~"
    - "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"
    - "你好你好你好你好你好你好你好你好你好你好你好"
    - "\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"
    - "😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇"
    - "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
execute:
  type: multiple
  requests:
    - req:
        - add_header:
            dummy_Header_Key: "dummyValue"
        - validate:
            response_payload:
              not_contains:
                - Error
                - Internal Server
                - Failed
                - Unauthorized
                - access denied
                - Forbidden
                - Method Not allowed
                - Gateway timeout
                - request timeout
                - server error
                - server busy
                - authentication error
                - authorization error
                - validation error
                - Permission Denied
                - invalid token
                - token expired
                - session expired
                - session timeout
                - unexpected error
                - unable to process request
                - bad request
                - service unavailable
                - account is locked
                - account is blocked
                - multiple failed attempts
                - "NotAuthenticated"     
        - success: x2
        - failure: exit
    - req:
        - modify_query_param:
            userKey: "${queryParamValues}"
        - modify_body_param:
            userKey: "${queryParamValues}"
        - validate:
            response_code:
              gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 5001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 5

strategy:
  run_once: /