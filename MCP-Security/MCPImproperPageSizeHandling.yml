---
id: IMPROPER_PAGE_SIZE_HANDLING_MCP
info:
  name: Improper Page Size Handling (MCP)
  description: |
    "This test evaluates the system's ability to handle paging parameters, particularly the page size, ensuring that the application limits the size to reasonable values to prevent performance degradation and resource exhaustion. The objective is to identify vulnerabilities that could allow users to inject excessively large numbers into paging parameters, potentially leading to server overload, increased memory consumption, or denial of service."
  details: |
    "The test involves sending API requests with manipulated paging parameters, such as a large page size value (e.g., 'size=999999999999'), to determine whether the application properly validates and restricts the size of the page to acceptable limits. The test checks whether the server imposes a maximum allowable size for paging parameters to prevent excessive memory usage and ensure stable application performance."
  impact: |
    "Improper handling of page size parameters can result in excessive memory consumption, performance degradation, or denial of service. If users can request extremely large page sizes, the server may become overloaded, leading to slower response times or even crashes. Ensuring proper validation and limits on paging parameters is crucial to maintaining application performance, resource management, and security."
  category:
    name: MCP
    shortName: MCP
    displayName: Model Context Protocol (MCP) Security
  subCategory: IMPROPER_PAGE_SIZE_HANDLING_MCP
  severity: LOW
  tags:
  - Business logic
  - OWASP top 10
  - HackerOne top 10
  references:
  - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
  - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
  - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
  - CWE-20
  cve:
  - CVE-2018-20679
  - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: POST
  request_payload:
    contains_all:
    - jsonrpc
    - method
    - params
    for_one:
      key:
        contains_either: $magic check for any parameter which is for pagination. Get the parameter key which controls the total number of records to fetch. Do not return value or any key which is unique or does not contains pagination related value
        extract: limitKey
      value:
        extract: limitValue
wordLists:
  attemptValues:
  - 9999
  - 99999
  - 999999
  - 9999999
  responseErrorList:
  - Error
  - Internal Server
  - Failed
  - Unauthorized
  - access denied
  - Forbidden
  - Method Not allowed
  - Gateway timeout
  - request timeout
  - server error
  - server busy
  - authentication error
  - authorization error
  - validation error
  - Permission Denied
  - invalid token
  - token expired
  - session expired
  - session timeout
  - unexpected error
  - unable to process request
  - bad request
  - service unavailable
  - account is locked
  - account is blocked
  - multiple failed attempts
  - Attention Required!
  - CloudFlare
  - "Sorry, you have been blocked"
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        x-akto-ignore: 123
    - validate:
        response_code:
          gte: 200
          lt: 300
        response_payload:
          length:
            gt: 0
          not_contains: "${responseErrorList}"
    - success: x2
    - failure: exit
  - req:
    - modify_query_param:
        limitKey: "${attemptValues}"
    - validate:
        response_code:
          gte: 200
          lt: 300
        response_payload:
          length:
            gt: 0
          not_contains: "${responseErrorList}"
validate:
  and:
  - compare_greater:
    - "${x2.response.stats.median_response_time}"
    - 5001
  - compare_greater:
    - "${x2.response.stats.median_response_time}"
    - "${x1.response.stats.median_response_time} * 5"
