id: BOLA_URL_INSERT_USER_ID
info:
  name: "Exploiting BOLA by inserting User IDs in URL path for Unauthorized Access."
  description: > 
    "This test involves assessing the vulnerability of a system's authorization mechanism 
    by manipulating User IDs within the URL path. This form of exploitation aims to gain 
    unauthorized access by inserting User IDs in the URL, tricking the system into 
    granting privileges that should be restricted. This test helps identify weaknesses 
    in object-level authorization controls, ensuring that proper access restrictions 
    are in place and unauthorized users cannot manipulate identifiers to gain 
    unauthorized entry."
  details: >
    "This test involves probing for vulnerabilities in a system's authorization process. 
    Specifically, attackers exploit BOLA by manipulating User IDs within the URL path 
    to gain unauthorized access. This method targets object-level authorization controls, 
    aiming to bypass restrictions and exploit weaknesses in the system's security. 
    Identifying and addressing these vulnerabilities is crucial for preventing unauthorized 
    users from manipulating identifiers and accessing restricted resources."
  impact: >
    "The impact of a successful Broken Object Level Authorization (BOLA) exploit can 
    be severe, leading to unauthorized access to sensitive data or functionalities. 
    Attackers could gain elevated privileges, compromising the integrity and 
    confidentiality of the system. This breach may result in unauthorized manipulation 
    or deletion of critical information, posing a significant risk to the organization's 
    data security. Proper mitigation strategies are essential to prevent such 
    unauthorized access and safeguard against potential data breaches."
  remediation: "To mitigate vulnerabilities stemming from User ID manipulation in the URL path, enforce robust server-side authorization checks. Ensure that access controls are based on user roles and permissions, independent of the User IDs in the URL. Strengthen object-level authorization controls to prevent unauthorized access attempts and maintain system integrity."
  category:
    name: BOLA
    shortName: BOLA
    displayName: Broken Object Level Authorization (BOLA)
  subCategory: BOLA_URL_INSERT_USER_ID
  severity: HIGH
  tags: 
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://www.akto.io/blog/bola-exploitation-using-unauthorized-uuid-on-api-endpoint"
    - "https://www.akto.io/blog/what-is-broken-object-level-authorization-bola"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa1-broken-object-level-authorization.md"
    - "https://cwe.mitre.org/data/definitions/284.html"
    - "https://cwe.mitre.org/data/definitions/285.html"
    - "https://cwe.mitre.org/data/definitions/639.html"
  cwe:
    - CWE-284
    - CWE-285
    - CWE-639
  cve:
    - CVE-2022-34770

auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
wordLists:
  random_ids:
    source: sample_data
    key: 
      regex: "^UserId$|^UserID$|^User-ID$|^user_id$|^user-id$|^userid$|^username$|^Username$|^USERNAME$|^uId$|^uid$|^UID$|^member_id$|^MemberId$|^memberId$|^profile_id$|^ProfileId$|^profileId$|^userIdentifier$|^UserIdentifier$|^user_identifier$|^account_id$|^AccountID$|^account-id$|^account_id$|^customer_id$|^CustomerID$|^customer-id$|^customer_id$"
    all_apis: true

execute:
  type: multiple
  requests:
    - req:
      - modify_url:
          token_insert:
            location: 1
            replace_with: ${random_ids}
      - success: vulnerable
      - failure: x2
    - req:
      - modify_url:
          token_insert:
            location: 2
            replace_with: ${random_ids}
      - success: vulnerable
      - failure: x3
    - req:
      - modify_url:
          token_insert:
            location: 3
            replace_with: ${random_ids}
      - success: vulnerable
      - failure: x4
    - req:
      - modify_url:
          token_insert:
            location: 4
            replace_with: ${random_ids}
      - success: vulnerable
      - failure: x5
    - req:
      - modify_url:
          token_insert:
            location: 5
            replace_with: ${random_ids}
validate:
  response_code:
    gte: 200
    lt: 300
  url:
    endpoint_in_traffic_context: false   
  response_payload:
    length:
      gt: 0
    percentage_match:
      lt: 10
    percentage_match_schema:
      gte: 90
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts