id: BOLA_COOKIE_FUZZING
info:
  name: "Fuzzing Cookie Data: Exploiting BOLA for Unauthorized Access."
  description: > 
    "In this scenario, attackers exploit Broken Object Level Authorization by employing 
    fuzzing techniques on cookie data extracted from existing user records. Fuzzing 
    involves manipulating and testing variations of the cookie data to uncover vulnerabilities 
    and potentially gain unauthorized access. This method underscores the critical need 
    for robust access controls, secure session management, and thorough testing to mitigate 
    the risks associated with unauthorized access and cookie-based attacks."
  details: >
    "In the exploitation of Broken Object Level Authorization through cookie data fuzzing, 
    attackers manipulate existing user data within cookies to uncover vulnerabilities and 
    gain unauthorized access. Fuzzing involves systematically testing variations of the 
    cookie parameters to identify weaknesses in access controls and session management. 
    This method highlights the importance of robust security measures to safeguard against 
    unauthorized access and mitigate the risks associated with Broken Object Level Authorization 
    through cookie-based attacks."
  impact: >
    "The impact of exploiting Broken Object Level Authorization through cookie data fuzzing 
    can be significant. Successful manipulation may lead to unauthorized access, compromising 
    user accounts and potentially exposing sensitive data. This method underscores the critical 
    importance of implementing robust security measures, including secure session management 
    and access controls, to prevent unauthorized access and protect user privacy from the 
    potential consequences of Broken Object Level Authorization exploitation."
  remediation: "To remediate vulnerabilities exploited through fuzzing techniques on cookie data for Broken Object Level Authorization, implement strict server-side access controls and secure session management mechanisms. Validate and sanitize cookie data to prevent manipulation and enforce authorization checks to ensure that only authorized users can access resources. Conduct thorough testing, including security testing and vulnerability assessments, to identify and address potential weaknesses before they can be exploited by attackers."
  category:
    name: BOLA
    shortName: BOLA
    displayName: Broken Object Level Authorization (BOLA)
  subCategory: BOLA_COOKIE_FUZZING
  severity: HIGH
  tags: 
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://www.akto.io/blog/bola-exploitation-using-unauthorized-uuid-on-api-endpoint"
    - "https://www.akto.io/blog/what-is-broken-object-level-authorization-bola"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa1-broken-object-level-authorization.md"
    - "https://cwe.mitre.org/data/definitions/284.html"
    - "https://cwe.mitre.org/data/definitions/285.html"
    - "https://cwe.mitre.org/data/definitions/639.html"
  cwe:
    - CWE-284
    - CWE-285
    - CWE-639
  cve:
    - CVE-2022-34770

auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts 
  private_variable_context:
    gt: 0
wordLists:
  cookiesList:
    source: sample_data
    key: Cookie
    location: header
    all_apis: true
execute:
  type: single
  requests:
  - req:
    - remove_auth_header: true
    - modify_header:
        cookie: "${cookiesList}"
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    percentage_match:
      gte: 90
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
