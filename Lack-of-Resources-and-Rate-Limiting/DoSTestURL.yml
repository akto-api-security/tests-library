id: DOS_TEST_URL
info:
  name: "Denial of Service test by entering long strings in 
  URL"
  description: "In this Denial of Service (DoS) test, lengthy strings 
  are injected into the URL. By overwhelming the system with 
  such inputs, testers assess how the application handles excessive data loads 
  in key-value pairs. This evaluation helps uncover potential vulnerabilities 
  and weaknesses in the system's parsing and processing capabilities, aiding 
  in the fortification against DoS attacks."
  details: "In this testing scenario, the focus lies on manipulating 
  URL by injecting lengthy strings. By inundating the 
  system with such inputs, testers analyze how the application manages the 
  parsing and processing of these parameters. This method aims to uncover 
  vulnerabilities in key handling mechanisms, providing insights into potential 
  weaknesses that malicious actors could exploit to disrupt the system's 
  functionality through Denial of Service (DoS) attacks."
  impact: "The impact of successful Denial of Service (DoS) attacks via manipulation 
  of URL can be significant. It may result in system slowdowns, 
  unresponsiveness, or complete service outages, disrupting normal operations. 
  Additionally, such attacks could compromise the availability and reliability 
  of the system, leading to financial losses and reputational damage due to the 
  perception of inadequate security measures."
  remediation: "To mitigate the Denial of Service (DoS) vulnerability related to entering long strings in the URL, several measures can be taken. First, implement input validation to limit the length of URL parameters and overall request size. Additionally, consider implementing rate limiting to prevent excessive requests from a single source. Server-side protections such as caching and load balancing can also help distribute the load and mitigate the impact of DoS attacks. Regular monitoring of server performance and response times can aid in detecting and mitigating potential DoS attacks promptly."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: DOS_TEST_URL
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  url:
    extract: urlVar
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        percentage_match:
          gte: 90
    - success: x2
    - failure: exit
  - req:
    - modify_url: ${urlVar}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3