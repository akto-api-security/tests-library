id: PAGINATION_MISCONFIGURATION
info:
  name: Possible DOS attack by Pagination misconfiguration
  description: "Quite often, APIs do not impose any restrictions on the size or number of resources that can be requested by the user."
  details: "Such vulnerabilities arise when there is no max limit imposed on the number of resources returned. Typically, the number of objects to be returned is provided by a parameter in the API call. An attacker can set it as a large number. "
  impact: "This can impact the API server performance, leading to  Denial of Service (DoS). It also leaves the door open to authentication flaws such as brute force."
  remediation: "A Pagination misconfiguration can potentially lead to a Denial of Service (DoS) attack by allowing an attacker to manipulate the pagination parameters to request a large number of records at once, overwhelming the server's resources and causing it to become unresponsive. To mitigate this risk, it's essential to implement proper pagination controls such as limiting the maximum number of records returned per request and enforcing reasonable pagination boundaries. Additionally, implementing rate limiting and monitoring for abnormal pagination patterns can help detect and mitigate potential DoS attacks."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: PAGINATION_MISCONFIGURATION
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254

api_selection_filters:
  query_param:
    for_one:
      key:
        or:
          - regex: .*limit.*
          - regex: .*size.*
          - regex: .*page.*
        extract: limitKey
      value:
        extract: limitValue
        datatype: number
  response_payload:
    length:
      extract: original_length

execute:
  type: single
  requests:
    - req:
        modify_query_param:
          limitKey: ${limitValue}0

validate:
  response_code:
    and:
      gte: 200
      lt: 300
  response_payload:
    length:
      gt: ${original_length}