id: QUERY_PARAM_ARRAY_BOMBING_DOS
info:
  name: "Denial of Service test by bombing multiple Query Parameter Arrays in request"
  description: "In this Denial of Service (DoS) test, multiple Query Parameter Array 
  in a request are flooded to assess system resilience under stress. By overwhelming 
  the system with numerous parameters, testers evaluate how effectively it handles 
  and processes such inputs. This method aims to uncover vulnerabilities in 
  parameter parsing and request handling, helping fortify defenses against DoS 
  attacks targeting the application's query parameter processing capabilities."
  details: "This test involves inundating a system's request with an 
  excessive number of query parameter arrays, potentially overwhelming its capacity 
  to process incoming data. Testers assess how the system copes with this 
  barrage of parameters, scrutinizing its ability to parse and handle the 
  influx of information effectively. The objective is to uncover any 
  weaknesses in parameter handling that could be exploited by attackers 
  to disrupt the system's functionality through Denial of Service (DoS) attacks."
  impact: "A successful Denial of Service (DoS) attack via bombarding multiple query 
  parameter arrays in a request can have severe consequences. It may lead to 
  system instability, causing slowdowns, unresponsiveness, or even crashes 
  as the system struggles to process the overwhelming volume of 
  data. Additionally, service disruptions can frustrate users, 
  resulting in diminished trust and potential reputational damage 
  for the organization, highlighting vulnerabilities in its request handling mechanisms."
  remediation: "Bombing multiple Query Parameter Arrays in a request can lead to a Denial of Service (DoS) attack by overwhelming the server with a large number of query parameters, causing it to consume excessive resources or crash. To mitigate this risk, it's important to validate and sanitize user input, including query parameters, to prevent injection attacks and limit the size and complexity of query parameter arrays. Additionally, implementing rate limiting and monitoring for abnormal request patterns can help detect and mitigate potential DoS attacks."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: QUERY_PARAM_ARRAY_BOMBING_DOS
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  query_param:
    for_one:
      key:
        regex: ".*"
        extract: userKey
      value:
        extract: userVal
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        percentage_match:
          gte: 90
    - success: x2
    - failure: exit
  - req:
    - delete_query_param: ${userKey}
    - add_query_param:
          "${userKey}[1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1]": ${userVal}
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3