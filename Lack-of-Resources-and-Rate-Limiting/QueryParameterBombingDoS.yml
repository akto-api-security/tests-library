id: QUERY_PARAM_BOMBING_DOS
info:
  name: "Denial of Service test by bombing multiple Query Parameters in request"
  description: "In this Denial of Service (DoS) test, multiple Query Parameters in a request are flooded to assess system resilience under stress. By overwhelming the system with numerous parameters, testers evaluate how effectively it handles and processes such inputs. This method aims to uncover vulnerabilities in parameter parsing and request handling, helping fortify defenses against DoS attacks targeting the application's query parameter processing capabilities."
  details: "This test involves inundating a system's request with an excessive number of query parameters, potentially overwhelming its capacity to process incoming data. Testers assess how the system copes with this barrage of parameters, scrutinizing its ability to parse and handle the influx of information effectively. The objective is to uncover any weaknesses in parameter handling that could be exploited by attackers to disrupt the system's functionality through Denial of Service (DoS) attacks."
  impact: "A successful Denial of Service (DoS) attack via bombarding multiple query parameters in a request can have severe consequences. It may lead to system instability, causing slowdowns, unresponsiveness, or even crashes as the system struggles to process the overwhelming volume of data. Additionally, service disruptions can frustrate users, resulting in diminished trust and potential reputational damage for the organization, highlighting vulnerabilities in its request handling mechanisms."
  remediation: "Bombing multiple query parameters in a request can cause a Denial of Service (DoS) attack by overwhelming the server with a large number of parameters, leading to resource exhaustion or system instability. To mitigate this risk, input validation and sanitization should be implemented to limit the size and complexity of query parameters. Additionally, rate limiting and request throttling mechanisms can help prevent abuse and protect against DoS attacks by limiting the number of requests allowed within a certain time frame. Regular monitoring and analysis of server logs can also help detect and respond to suspicious or malicious activity."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: QUERY_PARAM_BOMBING_DOS
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  query_param:
    for_one:
      key:
        regex: ".*"
        extract: userKey
      value:
        extract: userVal
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        percentage_match:
          gte: 90
    - success: x2
    - failure: exit
  - req:
    - add_query_param:
         queryparam1: ${userVal}
    - add_query_param:
         queryparam2: ${userVal}
    - add_query_param:
         queryparam3: ${userVal}
    - add_query_param:
         queryparam4: ${userVal}
    - add_query_param:
         queryparam5: ${userVal}
    - add_query_param:
         queryparam6: ${userVal}
    - add_query_param:
         queryparam7: ${userVal}
    - add_query_param:
         queryparam8: ${userVal}
    - add_query_param:
         queryparam9: ${userVal}
    - add_query_param:
         queryparam10: ${userVal}
    - add_query_param:
         queryparam11: ${userVal}
    - add_query_param:
         queryparam12: ${userVal}
    - add_query_param:
         queryparam13: ${userVal}
    - add_query_param:
         queryparam14: ${userVal}
    - add_query_param:
         queryparam15: ${userVal}
    - add_query_param:
         queryparam16: ${userVal}
    - add_query_param:
         queryparam17: ${userVal}
    - add_query_param:
         queryparam18: ${userVal}
    - add_query_param:
         queryparam19: ${userVal}
    - add_query_param:
         queryparam20: ${userVal}
    - add_query_param:
         queryparam21: ${userVal}
    - add_query_param:
         queryparam22: ${userVal}
    - add_query_param:
         queryparam23: ${userVal}
    - add_query_param:
         queryparam24: ${userVal}
    - add_query_param:
         queryparam25: ${userVal}
    - add_query_param:
         queryparam26: ${userVal}
    - add_query_param:
         queryparam27: ${userVal}
    - add_query_param:
         queryparam28: ${userVal}
    - add_query_param:
         queryparam29: ${userVal}
    - add_query_param:
         queryparam30: ${userVal}
    - add_query_param:
         queryparam31: ${userVal}
    - add_query_param:
         queryparam32: ${userVal}
    - add_query_param:
         queryparam33: ${userVal}
    - add_query_param:
         queryparam34: ${userVal}
    - add_query_param:
         queryparam35: ${userVal}
    - add_query_param:
         queryparam36: ${userVal}
    - add_query_param:
         queryparam37: ${userVal}
    - add_query_param:
         queryparam38: ${userVal}
    - add_query_param:
         queryparam39: ${userVal}
    - add_query_param:
         queryparam40: ${userVal}
    - add_query_param:
         queryparam41: ${userVal}
    - add_query_param:
         queryparam42: ${userVal}
    - add_query_param:
         queryparam43: ${userVal}
    - add_query_param:
         queryparam44: ${userVal}
    - add_query_param:
         queryparam45: ${userVal}
    - add_query_param:
         queryparam46: ${userVal}
    - add_query_param:
         queryparam47: ${userVal}
    - add_query_param:
         queryparam48: ${userVal}
    - add_query_param:
         queryparam49: ${userVal}
    - add_query_param:
         queryparam50: ${userVal}
    - add_query_param:
         queryparam51: ${userVal}
    - add_query_param:
         queryparam52: ${userVal}
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3