id: DOS_QUERY_PARAM_KEY
info:
  name: "Denial of Service test by entering long and random strings in 
  Query Param Keys"
  description: "In this Denial of Service (DoS) test, lengthy and randomized strings 
  are injected into the keys of Query Parameters. By overwhelming the system with 
  such inputs, testers assess how the application handles excessive data loads 
  in key-value pairs. This evaluation helps uncover potential vulnerabilities 
  and weaknesses in the system's parsing and processing capabilities, aiding 
  in the fortification against DoS attacks."
  details: "In this testing scenario, the focus lies on manipulating the keys of 
  Query Parameters by injecting lengthy and random strings. By inundating the 
  system with such inputs, testers analyze how the application manages the 
  parsing and processing of these parameters. This method aims to uncover 
  vulnerabilities in key handling mechanisms, providing insights into potential 
  weaknesses that malicious actors could exploit to disrupt the system's 
  functionality through Denial of Service (DoS) attacks."
  impact: "The impact of successful Denial of Service (DoS) attacks via manipulation 
  of Query Parameter keys can be significant. It may result in system slowdowns, 
  unresponsiveness, or complete service outages, disrupting normal operations. 
  Additionally, such attacks could compromise the availability and reliability 
  of the system, leading to financial losses and reputational damage due to the 
  perception of inadequate security measures."
  remediation: "To address the Denial of Service (DoS) vulnerability associated with entering long and random strings in Query Param Keys, it's crucial to implement input validation mechanisms. Validate the length and format of query parameter keys to ensure they adhere to expected patterns and limits. Additionally, consider implementing rate limiting to prevent excessive requests that could overload the server. Regular monitoring of server performance and response times can also help detect and mitigate potential DoS attacks in real-time."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: DOS_QUERY_PARAM_KEY
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  or:
    - request_payload:
        for_one:
          key:
            regex: ".*"
            extract: userKey
          value:
            extract: userValue
    - query_param:
        for_one:
          key:
            regex: ".*"
            extract: userKey
          value:
            extract: userValue
wordLists:
  queryParamValues:

    - "; : ! @ # $ % ^ & * ( ) < > ? | { } [ ] ~"
    - "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"
    - "你好你好你好你好你好你好你好你好你好你好你好"
    - "\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"
    - "😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇"
    - "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        percentage_match:
          gte: 90
    - success: x2
    - failure: exit
  - req:
    - delete_query_param: ${userKey}
    - add_query_param:
         ${queryParamValues}: userValue
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3