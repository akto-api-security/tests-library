
id: EMAIL_REGEX_REDOS_SMALL_INPUT
info:
  name: "ReDOS test on email parameters with Small Input"
  description: "A ReDoS (Regular Expression Denial of Service) test on email parameters with small input involves deliberately crafting email inputs that exploit vulnerabilities in regular expressions, causing excessive backtracking and leading to system slowdowns or crashes. By targeting email parameters with intricate patterns, testers assess the system's resilience against ReDoS attacks and identify potential weaknesses in input validation mechanisms. This evaluation aids in strengthening the system's defenses and mitigating the risk of ReDoS vulnerabilities in email handling functionalities."
  details: "In a ReDOS (Regular Expression Denial of Service) test with small input on email parameters, testers intentionally provide email inputs designed to trigger inefficient regular expression matching. These inputs exploit vulnerabilities in the regular expression engine, causing excessive backtracking and potentially leading to system slowdowns or crashes. By assessing the system's response to these inputs, testers can uncover weaknesses in input validation mechanisms and bolster defenses against ReDOS attacks targeting email handling functionalities."
  impact: "A successful ReDOS (Regular Expression Denial of Service) test with small input on email parameters can have significant repercussions. It may lead to system slowdowns or crashes due to excessive backtracking caused by inefficient regular expression matching. As a result, email handling functionalities may become unresponsive, impacting user experience and potentially causing service disruptions. Furthermore, the discovery of such vulnerabilities underscores the importance of implementing robust input validation mechanisms to mitigate the risk of ReDOS attacks."
  remediation: "To prevent ReDoS attacks on email parameters with small input, ensure that the regular expressions used for email validation are efficient and carefully crafted. Implement input length limits to prevent attackers from exploiting potential vulnerabilities, and consider using libraries or tools that provide protection against ReDoS, such as safe-regex in Node.js. Regular monitoring of application performance and updates to software components can also help mitigate the risk of ReDoS attacks."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: EMAIL_REGEX_REDOS_SMALL_INPUT
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    not_contains_either:
      - GET
  request_payload:
    for_one:
      key:
        regex: "^username$|^user$|^userid$|^user_id$|^login$|^login_id$|^email$|^account$|^account_id$|^member$|^member_id$|^id$|^user_name$|^uname$|^identifier$|^user_identifier$|^admin$|^nick$|^nickname$|^handle$|^alias$|^principal$|^profile$|^profile_id$|^name$|^signin$|^auth$|^credential$|^user_login$|^user_account$|^user_email$|^employee$|^employee_id$|^operator$|^customer_id$|^client_id$|^subscriber$|^subscriber_id$|^participant$|^participant_id$|^client_id$|^userLoginID$|^client-name$"
        extract: userKey

execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        percentage_match:
          gte: 90
    - success: x2
    - failure: exit
  - req:
    - modify_body_param:
         userKey: "a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a@a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a@a@a.com"
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3