id: DOS_FILE_URL_MP4
info:
  name: "Denial of Service test by providing a large MP4 file URL as input"
  description: "This test involving inputting a large MP4 file URL that aims to assess a 
  system's resilience against resource exhaustion attacks. By inundating the system 
  with a hefty MP4 file, it evaluates its ability to handle excessive data 
  loads and maintain functionality under stress. This test simulates a 
  real-world scenario where malicious actors attempt to overwhelm a system's 
  capacity, highlighting vulnerabilities in its defense mechanisms against such attacks."
  details: "This test involves inputting a large MP4 file URL to flood the 
  system with data requests, aiming to overwhelm its capacity and render 
  it unresponsive. It evaluates the system's resilience against denial of 
  service (DoS) attacks, assessing its ability to handle resource exhaustion 
  and identifying potential vulnerabilities in its defense mechanisms. The test 
  focuses on the system's mitigation strategies and resilience under stress."
  impact: "The impact of this test could potentially disrupt essential services 
  and cause downtime for users reliant on the affected system. By overwhelming 
  its capacity, legitimate users may be unable to access resources, leading 
  to financial losses and reputational damage for the organization. Furthermore, 
  if left unaddressed, such vulnerabilities could be exploited by malicious actors 
  to orchestrate more severe attacks, jeopardizing data integrity and compromising 
  sensitive information."
  remediation: "To mitigate Denial of Service (DoS) attacks caused by providing large MP4 file URLs as input, it's crucial to implement input validation and limit the size of the input accepted by the application. Additionally, you can employ rate limiting mechanisms to restrict the number of requests per unit of time from a single client or IP address. Furthermore, consider implementing caching strategies to reduce the load on the server and ensure that resources are not excessively consumed when processing large requests. Regular monitoring of server performance and traffic patterns can help detect and mitigate potential DoS attacks proactively."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: DOS_FILE_URL_MP4
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  or:
    - request_payload:
        for_one:
          value:
            contains_either:
                - .mp4
          key:
            extract: mp4_key
    - query_param:
        for_one:
          value:
            contains_either:
                - .mp4
          key:
            extract: mp4_key
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        response_payload:
          percentage_match:
            gte: 90
    - success: x2
    - failure: exit
  - req:
    - modify_query_param:
        mp4_key: https://raw.githubusercontent.com/akto-api-security/tests-library/akto_resources/resources/heavy%20files/video.mp4
    - modify_body_param:
        mp4_key: https://raw.githubusercontent.com/akto-api-security/tests-library/akto_resources/resources/heavy%20files/video.mp4
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3