id: THIRD_PARTY_API_REQUEST_BOMBING
info:
  name: "Denial of Service Test on 3rd Party API endpoints using excessive Request replay"
  description: "In a Denial of Service (DoS) test on 3rd party API endpoints, excessive 
  request replay is employed to evaluate the system's resilience against repeated 
  requests. Testers inundate the API with an overwhelming number of requests, 
  mimicking a real-world scenario of heavy traffic or malicious activity. This 
  test aims to assess how effectively the API endpoint handles and mitigates 
  the impact of such request floods, highlighting potential vulnerabilities 
  and enabling measures to strengthen its defenses against DoS attacks."
  details: "In this test, testers repeatedly send an excessive number of 
  requests to 3rd party API endpoints, aiming to overwhelm their 
  capacity to handle incoming traffic. By simulating a barrage of 
  requests, the test assesses the API's ability to maintain 
  functionality and respond to legitimate queries amidst a 
  flood of traffic. Identifying any weaknesses in the API's 
  resilience helps organizations fortify their systems against 
  potential Denial of Service (DoS) attacks targeting these endpoints."
  impact: "The impact of a successful Denial of Service (DoS) test on 3rd party 
  API endpoints using excessive request replay can be severe. It may lead 
  to service disruptions, causing delays or unavailability of critical 
  functionalities for users relying on the API. Additionally, prolonged 
  outages can result in financial losses and reputational damage, as 
  clients and stakeholders perceive the API as unreliable or 
  insecure. Strengthening defenses against such attacks is crucial 
  for maintaining the stability and trustworthiness of the API infrastructure."
  remediation: "Denial of Service (DoS) testing on third-party API endpoints involves repeatedly replaying requests to the API in excessive volume or frequency. This test aims to assess the resilience of the third-party service to handle high loads and prevent service degradation or downtime. By bombarding the API with a large number of requests, testers can identify potential bottlenecks or vulnerabilities that may lead to performance issues or service disruptions. Remediation may involve implementing rate limiting, request throttling, caching mechanisms, or working with the third-party provider to optimize API performance and ensure reliable service delivery."
  category:
    name: RL
    shortName: Lack of Resources & Rate Limiting
    displayName: Lack of Resources & Rate Limiting (RL)
  subCategory: THIRD_PARTY_API_REQUEST_BOMBING
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa4-unrestricted-resource-consumption.md"
  cwe:
    - CWE-400
  cve:
    - CVE-2023-4647
    - CVE-2023-38254
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  url:
    contains_either:
      - send-invitation
      - invite-user
      - user-invite
      - send-email
      - send-mail
      - mail
      - dispatch
      - send-welcome-email
      - bulk-email
      - notify-subscribers
      - send-newsletter
      - webhook-dispatch
wordLists:
  dummyHeaders:
    - a
    - b
    - c
    - d
    - e
execute:
  type: multiple
  requests:
  - req:
    - add_header:
        dummy_Header_Key: "dummyValue"
    - validate:
        percentage_match:
          gte: 90
    - success: x2
    - failure: exit
  - req:
    - add_header:
        dummy_Header_Key: ${dummyHeaders}
    - validate:
        response_code:
          gt: 505
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 3001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 3