id: BALANCE_CALCULATION_HANDLING
info:
  name: "Account Balance Calculation Flaw"
  description: >
    "This test evaluates how the application calculates and displays the account balance, particularly when including or excluding pending transactions. The objective is to identify flaws or inconsistencies in balance calculations that could lead to incorrect financial information being presented to the user."
  details: >
    "The test focuses on scenarios where users may request an account balance with or without including pending transactions."
  impact: >
    "Improper handling of account balance calculations can lead to significant issues, such as presenting incorrect financial information to users, causing confusion, or leading to financial disputes. Inaccurate balances could affect decision-making for users and result in unauthorized transactions or overdrafts. Ensuring accurate and consistent balance calculation is critical to maintain trust, prevent potential legal issues, and safeguard both the user's and the organization's financial integrity."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: BALANCE_CALCULATION_HANDLING
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
settings:
  nature: INTRUSIVE
  plan: PRO
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

    # Here we check for the modified values of contextual keys in response.
    for_one:
      key:
        regex: "${probableOutputParameters}"
        extract: outputUserKey
      value:
        extract: outputUserValue
  request_payload:
    for_one:
      key:
        regex: "${probableInputParameters}"
        extract: userKey
      value:
        extract: userVal

wordLists:
  probableInputParameters:
    - includePendingTransactions
    - pending
    - includeAll

  probableOutputParameters:
    - balance
    - amountLeft
    - totalAmount
    - remainingAmount
    - availableCredit
    - outstandingBalance
    - dueAmount
    - finalAmount
    - discountedPrice
    - calculatedTax
    - processedAmount
    - adjustedAmount
    - refundedAmount
    - paidAmount
    - receivedAmount
    - netAmount
    - payableAmount
    - settlementAmount
    - accruedInterest
    - clearedBalance
    - unsettledBalance
    - transactionAmount
    - billedAmount
    - costAfterDiscount
  passValues:
    - true

  failValues:
    - false

  responseErrorList:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"

execute:
  type: multiple
  requests:
    - req:
        - modify_body_param:
            userKey: "${failValues}"
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains: ${responseErrorList}
              for_one:
                key:
                  regex: "${probableOutputParameters}"
                  extract: outputUserKey1
                value:
                  extract: outputUserValue1
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: "${passValues}"
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains: ${responseErrorList}
              for_one:
                key:
                  eq: "${outputUserKey1}"
                value:
                  neq: "${outputUserValue1}"

        - success: vulnerable
