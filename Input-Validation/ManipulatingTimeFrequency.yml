id: MANIPULATING_TIME_FREQUENCY
info:
  name: "Manipulating Time Frequency"
  description: |
    "This test evaluates the system's ability to correctly handle and validate time-based frequency settings, particularly in scenarios involving automated reorders or subscriptions. The objective is to identify vulnerabilities that could allow users to manipulate reorder frequencies to repeatedly trigger discounts or benefits without adhering to the intended usage patterns."
  details: |
    "The test involves sending API requests with varying time frequency parameters, such as 'daily', 'weekly', or 'monthly', to check if the system correctly validates the frequency and applies discounts or benefits appropriately. For example, a user might attempt to change the reorder frequency from 'monthly' to 'daily' to exploit discounts meant for longer intervals, without completing prior orders. The test checks whether the application enforces time frequency validation rules, preventing unauthorized or excessive benefits from being applied."
  impact: |
    "Manipulating time frequency settings can lead to financial losses, abuse of promotional discounts, and unfair advantages for certain users. If users can repeatedly trigger discounts or benefits by altering reorder frequencies without completing prior orders, it undermines the integrity of discount strategies and affects profitability. Ensuring robust validation of time frequency settings is crucial to maintaining fair promotional practices, protecting revenue, and preventing exploitation of automated reorder systems."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: MANIPULATING_TIME_FREQUENCY
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - Secure Application Development Controls
    - System and Communication Security
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 6.5.7
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SA-11
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_payload:
    for_one:
      key:
        regex: "${probableInputParameters}"
        extract: userKey

wordLists:
  probableInputParameters:
    - frequency
    - repeatFrequency
    - orderFrequency
    - reorderInterval
    - deliveryFrequency
    - subscriptionFrequency
    - autoOrderFrequency
    - recurrencePeriod
    - repeatInterval
    - autoRepeatInterval
    - restockFrequency
    - scheduleFrequency
    - timeInterval
    - purchaseFrequency
    - subscriptionInterval
    - reorderCycle
    - intervalPeriod

  sampleValues:
    source: sample_data
    key:
      regex: frequency|repeatFrequency|orderFrequency|reorderInterval|deliveryFrequency|subscriptionFrequency|recurrencePeriod
    location: payload

  responseErrorList:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"

execute:
  type: multiple
  requests:
    - req:
        - delete_body_param: ${userKey}
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              percentage_match:
                eq: 90
              not_contains: ${responseErrorList}
    # if it works without the param, then it's not exploitable using that param.
        - success: exit
        - failure: x2
    - req:
        - modify_body_param:
            userKey: ${sampleValues}
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              percentage_match:
                eq: 90
              not_contains: ${responseErrorList}
        - success: vulnerable
settings:
  duration: FAST
