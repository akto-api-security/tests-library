id: BYPASS_PRODUCT_RETURN_VALIDATION_USING_SAMPLE_PRODUCTS
info:
  name: "Bypass Product Return Validation using sample products"
  description: |
    "This test evaluates the system's ability to properly handle and validate product return requests, particularly when users attempt to manipulate return policies to obtain store credit without returning the actual item. The objective is to identify vulnerabilities that could allow users to exploit the return process and gain store credits or refunds without fulfilling the necessary conditions."
  details: |
    "The test involves sending API requests with manipulated parameters related to product returns, such as initiating returns for different items or reasons to check if the system properly validates the return request. For example, a user may claim a product is 'defective' to obtain a refund in the form of store credit, without actually returning the item. The test checks whether the application enforces return validation rules consistently, ensuring that credit or refunds are only issued for legitimate returns."
  impact: |
    "Bypassing product return validation can lead to financial losses, abuse of store credit policies, and fraudulent refund claims. If users can manipulate return processes to receive credit or refunds without returning the items, it compromises the integrity of the return policy and affects profitability. Ensuring robust validation of product returns is crucial to prevent exploitation, maintain fair return practices, and protect against potential fraud."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: BYPASS_PRODUCT_RETURN_VALIDATION
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - Secure Application Development Controls
    - System and Communication Security
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 6.5.7
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SA-11
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
    contains_either: ${probableOutputParameters}
  request_payload:
    for_one:
      key:
        regex: "${probableInputParameters}"
        extract: userKey
  url:
    contains_either: ${probableInputValidationParameters}

wordLists:
  probableInputValidationParameters:
    - initiateRefund
    - startRefund
    - claimRefund
    - initiateReturn
    - startReturn

  probableInputParameters:
    - productId
    - productList
    - productIds
    - itemId
    - items
    - returnedProductIds
    - productCodes
    - returnProductList

  probableOutputParameters:
    - amount successfully refunded
    - amount refunded
    - refund is processed
    - refund completed
    - refund confirmed
    - refund successful
    - return approved
    - return processed
    - return accepted
    - refund authorized
    - money returned
    - credit issued
    - refund granted
    - refund initiated
    - refund finalized
    - refund transaction completed
    - return validated
    - store credit applied
    - credit granted
    - refund credited
    - return authorization granted
    - amount credited back
    - exchange processed
    - replacement approved

  attemptValues:
    source: sample_data
    key:
      regex: productId|productList|productIds|itemId|items|returnedProductIds|productCodes|returnProductList
    location: payload

execute:
  type: single
  requests:
    - req:
        - modify_body_param:
            userKey: ${attemptValues}

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"
    contains_either: ${probableOutputParameters}
settings:
  duration: FAST
