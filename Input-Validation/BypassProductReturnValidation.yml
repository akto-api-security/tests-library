id: BYPASS_PRODUCT_RETURN_VALIDATION
info:
  name: "Bypass Product Return Validation"
  description: |
    "This test evaluates the system's ability to handle and validate product return requests properly, ensuring that returns and refunds are processed only once per valid transaction. The objective is to identify vulnerabilities that could allow users to abuse return policies by submitting multiple refund requests for the same order."
  details: |
    "The test involves sending API requests to initiate multiple return or refund requests for the same order and product, using different reasons or without altering any data. For example, users might attempt to claim a refund for a product marked as 'defective' multiple times to receive multiple refunds or submit returns for different items from the same order without proper validation checks. The test checks whether the application correctly enforces return validation rules to prevent repeated refunds for the same transaction or unauthorized returns."
  impact: |
    "Bypassing product return validation can lead to significant financial losses, fraudulent refund claims, and abuse of return policies. If users can manipulate return processes to receive multiple refunds for the same purchase or exploit lenient validation checks, it undermines the business's financial stability and trust in its return policies. Ensuring robust validation of product returns and refunds is crucial to prevent exploitation, maintain fair return policies, and protect against potential fraud."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: BYPASS_PRODUCT_RETURN_VALIDATION
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: STANDARD
  duration: FAST
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
    contains_either: ${probableOutputParameters}
  request_payload:
    contains_either: ${probableInputParameters}
  url:
    contains_either: ${probableInputValidationParameters}

wordLists:
  probableInputValidationParameters:
    - initiateRefund
    - startRefund
    - claimRefund
    - initiateReturn
    - startReturn

  probableInputParameters:
    - orderId
    - itemId
    - productId
    - returnId
    - returnRequestId
    - returnTransactionId
    - orderNumber
    - productCode
    - sku
    - returnItemId
    - merchandiseId
    - purchaseId
    - returnReference
    - refundOrderId
    - invoiceNumber
    - refundRequestId

  probableOutputParameters:
    - amount successfully refunded
    - amount refunded
    - refund is processed
    - refund completed
    - refund confirmed
    - refund successful
    - return approved
    - return processed
    - return accepted
    - refund authorized
    - money returned
    - credit issued
    - refund granted
    - refund initiated
    - refund finalized
    - refund transaction completed
    - return validated

execute:
  type: single
  requests:
    - req: []

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"
    contains_either: ${probableOutputParameters}
