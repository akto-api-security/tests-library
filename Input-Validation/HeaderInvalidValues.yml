id: HEADER_INVALID_VALUES
info:
  name: Header Invalid Values
  description: >
    This test focuses on the handling of invalid values in HTTP headers. It aims to identify vulnerabilities arising from the server's inability to properly handle various types of unexpected input in header fields, such as control characters, emojis, and whitespace.
  details: >
    The test involves sending HTTP requests with headers containing invalid or malformed values. This includes leading control characters, leading whitespace, null values, and various types of emojis. The goal is to observe how the server responds to these inputs and whether it can handle them gracefully without exposing any vulnerabilities.
  impact: >
    Failure to properly handle invalid header values can lead to security risks such as denial of service, information leakage, or incorrect processing of requests. Servers that do not sanitize or validate header input may be susceptible to attacks that exploit these weaknesses, potentially allowing unauthorized access or disruption of service.

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: HEADER_INVALID_VALUES
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://endava.github.io/cats/docs/fuzzers/header-fuzzers
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271

attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: SLOW
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR § 164.312(c)(1)
    - 45 CFR § 164.308(a)(1)(ii)(A)
  SOC 2:
    - Secure Application Development Controls
    - System and Communication Security
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 6.5.7
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SA-11
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_headers:
    for_one:
      key:
        regex: .*
        extract: userKey
      value:
        extract: userVal

execute:
  type: multiple
  requests:
    - req:
    # checking if the header is actually important, if it is only then continue with attack.
        - delete_header: ${userKey}
        - validate:
            response_code:
              gte: 400
        - success: x2
        - failure: exit
    - req:
        - modify_header:
            userKey: "${userVal}${attemptValues}"
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              percentage_match:
                gte: 90
              not_contains: ${badList}
        - success: vulnerable
        - failure: x3
    - req:
        - modify_header:
            userKey: "${attemptValues}"
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              percentage_match:
                gte: 90
              not_contains: ${badList}
        - success: vulnerable
        - failure: x4
    - req:
        - modify_header:
            userKey: "${attemptValues}${userVal}"
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              percentage_match:
                gte: 90
              not_contains: ${badList}
        - success: vulnerable

wordLists:
  attemptValues:
    # null values
    - \u0000
    - \0
    - "NULL"
    - "null"
    - "0000"
    - \x00
    - "\0"
    - "\0"
    - NUL
    - "NUL"
    - "\0"
    - "\000"
    - 0x00
    - "\0null"
    # emojis
    - ":)"
    # abugidas chars
    - "జ్ఞ‌ా"
    - "স্র‌ু"

  badList:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"

