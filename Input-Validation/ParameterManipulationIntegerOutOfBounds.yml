id: PARAMETER_MANIPULATION_INTEGER_OUT_OF_BOUNDS
info:
  name: Parameter manipulation by using out of bound integers in transactions
  description: >
    "This test involves manipulating parameters by introducing integer values that are outside the expected or permissible range in transactional inputs. The goal is to evaluate how the system handles extreme or out-of-bound integers, ensuring it properly validates input fields to prevent errors, unauthorized actions, or vulnerabilities caused by unexpected values."
  details: >
    "The test focuses on injecting integer values that exceed the defined limits or constraints into various input fields, such as quantities, IDs, or other numeric parameters. Examples include using excessively large numbers, negative values where not allowed, or values beyond the maximum or minimum accepted thresholds. This test helps identify weaknesses in validation logic and assesses whether the system effectively handles integer overflows, underflows, or other numeric edge cases, thereby preventing unexpected behaviors, errors, or security issues."
  impact: >
    "Failure to properly handle out-of-bound integers can result in significant consequences, such as data corruption, denial of service, or unauthorized access. For instance, attackers could exploit a vulnerability to cause application crashes, manipulate critical data, or bypass controls by submitting extreme or unexpected values. Ensuring robust input validation for integer parameters is crucial to maintaining the system's stability, security, and data integrity."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: PARAMETER_MANIPULATION_INTEGER_OUT_OF_BOUNDS
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards: compliance/input-validation.conf

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

    # Here we check for the modified values of contextual keys in response.
    for_one:
      key:
        regex: "${probableOutputParameters}"
        extract: outputUserKey
      value:
        datatype: number
        extract: outputUserValue
  or:
  # In case the amount is being sent as a number
    - request_payload:
        for_one:
          key:
            regex: "${probableInputParameters}"
            extract: userKey
          value:
            datatype: number
            extract: userVal
  # In case the amount is being sent as a string
    - request_payload:
        for_one:
          key:
            regex: "${probableInputParameters}"
            extract: userKey2
          value:
            regex: "\b([1-9][0-9]*)\b"
            extract: userVal2
wordLists:
  probableInputParameters:
    - amount
    - amounts
    - price
    - cost
    - total
    - quantity
    - qty
    - fee
    - discount
    - charge
    - tax
    - payment
    - deposit
    - withdrawal
    - limit
    - threshold
    - minAmount
    - maxAmount
    - credit
    - debit
    - interest
    - surcharge
    - penalty
    - refund
    - shippingCost
    - handlingFee
  probableOutputParameters:
    - balance
    - amountLeft
    - totalAmount
    - remainingAmount
    - availableCredit
    - outstandingBalance
    - dueAmount
    - finalAmount
    - discountedPrice
    - calculatedTax
    - processedAmount
    - adjustedAmount
    - refundedAmount
    - paidAmount
    - receivedAmount
    - netAmount
    - payableAmount
    - settlementAmount
    - accruedInterest
    - clearedBalance
    - unsettledBalance
    - transactionAmount
    - billedAmount
    - costAfterDiscount
  integerBounds:
    - -9999999999
    - 9999999999
execute:
  type: single
  requests:
    - req:
        - modify_body_param:
            userKey: ${integerBounds}
        - modify_body_param:
            userKey2: !!str ${integerBounds}
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"
    for_one:
      key:
        eq: "${outputUserKey}"
      value:
        neq: "${outputUserValue}"

