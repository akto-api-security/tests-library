id: OVERWRITING_EXISTING_RESOURCES_BY_MANIPULATING_IDENTIFIERS
info:
  name: "Overwriting Existing Resources by Manipulating Identifiers"
  description: >
    "This test evaluates the system's ability to handle and validate resource identifiers correctly, ensuring that users cannot manipulate resource identifiers to overwrite or modify existing resources they are not authorized to access. The objective is to identify vulnerabilities that could allow users to overwrite or modify sensitive data by exploiting weak identifier handling."
  details: >
    "The test involves sending API requests using the PUT method to manipulate resource identifiers (e.g., product IDs, user IDs, etc.) in the request URL or payload. For example, a user may attempt to change the identifier in the API endpoint or the request body to overwrite another user's data or modify a product's details that they do not own. The test checks whether the application enforces proper access controls and prevents unauthorized modifications to existing resources, even when identifiers are manipulated."
  impact: >
    "Overwriting existing resources by manipulating identifiers can lead to data corruption, unauthorized access, and loss of data integrity. If users can change resource identifiers to modify or delete resources they should not have access to, it undermines the security and trustworthiness of the application. Ensuring robust validation of resource identifiers and enforcing strict access controls is crucial to prevent unauthorized resource manipulation and maintain data integrity and security."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: OVERWRITING_EXISTING_RESOURCES_BY_MANIPULATING_IDENTIFIERS
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271

attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - Secure Application Development Controls
    - System and Communication Security
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 6.5.7
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SA-11
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    - neq: OPTIONS
    - neq: PUT
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

  request_payload:
    for_one:
      key:
        regex: "${probableInputParameters}"
        extract: userKey

wordLists:
  probableInputParameters:
    - productId
    - resourceId
    - itemId
    - entityId
    - assetId
    - recordId
    - objectId
    - identifier
    - userId
    - orderId
    - postId
    - documentId
    - entryId
    - refId
    - accountId
    - articleId
    - nodeId
    - recordNumber
    - transactionId

  productIds:
    source: sample_data
    key:
      regex: productId|resourceId|itemId|entityId|assetId|recordId|objectId|identifier|userId|orderId|postId|documentId|entryId|refId|accountId|articleId|nodeId|recordNumber|transactionId
    location: payload

execute:
  type: single
  requests:
    - req:
        - modify_method: PUT
        - modify_body_param:
            userKey: ${productIds}

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    percentage_match:
      gte: 90
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"

