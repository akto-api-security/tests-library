id: MANIPULATE_FEES
info:
  name: "Manipulate Fees or Price in Transactions"
  description: >
    "This test evaluates whether the system correctly handles and validates transaction fees or product prices. The objective is to identify potential vulnerabilities that could allow users to manipulate the price of items or associated fees during a transaction, potentially resulting in financial loss or fraud."
  details: >
    "The test focuses on scenarios where users or attackers attempt to modify fee values in transaction requests, such as setting the fee to zero or an incorrect amount."
  impact: >
    "Manipulating fees or prices in transactions can lead to significant financial losses and undermine trust in the payment system. If users are able to alter prices or fees to their advantage, it could result in fraudulent transactions, reduced revenue, and potential damage to the business's reputation. Ensuring robust validation of all price and fee parameters is essential to maintain financial integrity, protect against fraud, and uphold fair business practices."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: MANIPULATE_FEES
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - Secure Application Development Controls
    - System and Communication Security
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 6.5.7
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SA-11
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

    # Here we check for the modified values of contextual keys in response.
    for_one:
      key:
        regex: "${probableOutputParameters}"
        extract: outputUserKey
      value:
        extract: outputUserValue
  or:
  # In case the amount is being sent as a number
    - request_payload:
        for_one:
          key:
            regex: "${probableInputParameters}"
            extract: userKey
          value:
            datatype: number
            extract: userVal
  # In case the amount is being sent as a string
    - request_payload:
        for_one:
          key:
            regex: "${probableInputParameters}"
            extract: userKey2
          value:
            regex: "\b([1-9][0-9]*)\b"
            extract: userVal2
wordLists:
  probableInputParameters:
  # Fees-related parameters
    - fees
    - fee
    - charge
    - serviceFee
    - processingFee
    - handlingFee
    - surcharge
    - additionalCharge
    - transactionFee
    - extraCost
    - cost
    - convenienceFee
    - paymentFee
    - commission
    - gatewayFee
    - platformFee
    - deliveryFee
    - shippingCharge
    - administrativeFee
    - reservationFee
    - bookingFee
    - checkoutFee
    - financeCharge

  # Price-related parameters
    - price
    - basePrice
    - unitPrice
    - itemCost
    - productPrice
    - salePrice
    - listPrice
    - discountedPrice
    - retailPrice
    - catalogPrice
    - netPrice
    - subtotal
    - totalPrice
    - quotedPrice
    - finalPrice
    - adjustedPrice

  probableOutputParameters:
    - transactionAmount
    - amount
    - finalAmount
    - balance
    - paid
    - bill
    - totalAmount
    - totalPaid
    - payableAmount
    - netAmount
    - invoiceAmount
    - dueAmount

execute:
  type: single
  requests:
    - req:
        - modify_body_param:
            userKey: 0
        - modify_body_param:
            userKey2: "0"

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"
    for_one:
      key:
        eq: "${outputUserKey}"
      value:
        neq: "${outputUserValue}"

