id: INPUT_VALIDATION_BY_REPLACING_OBJECT_WITH_PRIMITIVE
info:
  name: Input Validation by Replacing Object with Primitive
  description: >
    This test evaluates how well the application handles input validation when an object is replaced with a primitive data type.
  details: >
    The test involves sending requests where expected objects are substituted with primitive values to determine the applicationâ€™s response to this type mismatch.
  impact: >
    Failure to validate the input type properly can lead to unintended behavior, errors in data processing, and potential security vulnerabilities.


  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: INPUT_VALIDATION_BY_REPLACING_OBJECT_WITH_PRIMITIVE
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://endava.github.io/cats/docs/fuzzers/header-fuzzers
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
compliance_standards: compliance/input-validation.conf
remediation: remediation/INPUT_VALIDATION_BY_REPLACING_OBJECT_WITH_PRIMITIVE.md
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_payload:
    for_one:
      key:
        regex: .*
        extract: userKey
      value:
        extract: userVal

execute:
  type: multiple
  requests:
    - req:
    # checking if the value is actually important, if it is only then continue with attack.
        - delete_body_param: ${userKey}
        - validate:
            response_code:
              gte: 400
        - success: x2
        - failure: exit
    - req:
        - replace_body: ${userVal}
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              percentage_match:
                gte: 90
              percentage_match_schema:
                eq: 100
              not_contains: ${badList}
        - success: vulnerable

wordLists:
  badList:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"

