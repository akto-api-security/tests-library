id: PARAMETER_MANIPULATION_STRING_MANIPULATION
info:
  name: Parameter manipulation by string manipulation in transactions
  description: >
    "This test involves manipulating string-based parameters in transactional inputs to assess how the system handles unexpected or malformed string data. It aims to ensure that the application correctly validates and processes string inputs, preventing errors, security vulnerabilities, or unauthorized actions that could arise from improper handling of manipulated strings."
  details: >
    "The test focuses on modifying string parameters, such as names, addresses, or identifiers, by injecting special characters, excessively long strings, encoded inputs, or other unexpected formats. Scenarios may include inserting SQL commands, HTML tags, or other malicious content within string fields to evaluate the application's ability to sanitize and validate inputs. By testing different string manipulation techniques, this test identifies weaknesses in input validation logic, ensuring that only properly formatted and legitimate strings are accepted."
  impact: >
    "Improper handling of string manipulations can lead to various security vulnerabilities, including injection attacks (such as SQL injection or cross-site scripting), data corruption, or unauthorized access. If the system fails to validate and sanitize string inputs properly, attackers could exploit these weaknesses to compromise sensitive data, manipulate transactions, or disrupt application functionality. Ensuring robust validation against string manipulations protects the application from such risks, maintaining its security, integrity, and reliability."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: PARAMETER_MANIPULATION_STRING_MANIPULATION
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: STANDARD
  duration: FAST
compliance_standards: compliance/input-validation.conf
remediation: remediation/PARAMETER_MANIPULATION_STRING_MANIPULATION.md
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

    # Here we check for the modified values of contextual keys in response.
    for_one:
      key:
        regex: "${probableOutputParameters}"
        extract: outputUserKey
      value:
        datatype: number
        extract: outputUserValue
  or:
  # In case the amount is being sent as a number
    - request_payload:
        for_one:
          key:
            regex: "${probableInputParameters}"
            extract: userKey
          value:
            datatype: number
            extract: userVal
  # In case the amount is being sent as a string
    - request_payload:
        for_one:
          key:
            regex: "${probableInputParameters}"
            extract: userKey
          value:
            regex: "\b([1-9][0-9]*)\b"
            extract: userVal
wordLists:
  probableInputParameters:
    - amount
    - amounts
    - price
    - cost
    - total
    - quantity
    - qty
    - fee
    - discount
    - charge
    - tax
    - payment
    - deposit
    - withdrawal
    - limit
    - threshold
    - minAmount
    - maxAmount
    - credit
    - debit
    - interest
    - surcharge
    - penalty
    - refund
    - shippingCost
    - handlingFee
  probableOutputParameters:
    - balance
    - amountLeft
    - totalAmount
    - remainingAmount
    - availableCredit
    - outstandingBalance
    - dueAmount
    - finalAmount
    - discountedPrice
    - calculatedTax
    - processedAmount
    - adjustedAmount
    - refundedAmount
    - paidAmount
    - receivedAmount
    - netAmount
    - payableAmount
    - settlementAmount
    - accruedInterest
    - clearedBalance
    - unsettledBalance
    - transactionAmount
    - billedAmount
    - costAfterDiscount
  attackStrings:
    - abcd

execute:
  type: single
  requests:
    - req:
        - modify_body_param:
            userKey: ${userVal}${attackStrings}
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"
    for_one:
      key:
        eq: "${outputUserKey}"
      value:
        neq: "${outputUserValue}"

