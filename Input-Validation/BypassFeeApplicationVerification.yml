id: BYPASS_FEE_APPLICATION_VERIFICATION
info:
  name: "Bypassing fee application on transactions"
  description: |
    This vulnerability involves bypassing the verification mechanism that applies fees to transactions. Attackers might exploit this flaw to avoid fees by manipulating request parameters related to fee application.
  details: |
    The issue occurs when an attacker modifies the request to bypass the fee application process. 
  impact: |
    Exploiting this vulnerability can lead to financial loss for the business due to uncollected fees. It also undermines the integrity of the fee application process, which could result in inconsistent revenue and potential abuse of the transaction system.

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: BYPASS_FEE_APPLICATION_VERIFICATION
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: STANDARD
  duration: FAST


api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_payload:
    for_one:
      key:
        regex: "${probableInputParameters}"
        extract: userKey
      value:
        extract: userVal

wordLists:
  probableInputParameters:
    - applyFee
    - feeApplicable
    - chargeFee
    - includeFee
    - feeRequired
    - addFee
    - feeStatus
    - feeFlag
    - isFeeApplied

  probableOutputFailParameters:
    - failed
    - denied
    - error
    - rejected
    - incomplete
    - notApplied
    - feeRequired
    - feeFailure

  probableOutputPassParameters:
    - success
    - bypassed
    - passed
    - applied
    - confirmed
    - validated
    - approved
    - completed
    - feeWaived

  responseErrorList:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"

execute:
  type: multiple
  requests:
    - req:
        - modify_body_param:
            userKey: false
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains: ${responseErrorList}
              contains_either: ${probableOutputFailParameters}
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: true
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains: ${responseErrorList}
              contains_either: ${probableOutputPassParameters}
        - success: vulnerable
