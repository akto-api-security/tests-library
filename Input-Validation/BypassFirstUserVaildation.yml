id: BYPASS_FIRST_USER_VALIDATION
info:
  name: "Bypassing First User Validation"
  description: |
    "This test examines whether the system correctly enforces validation checks for first-time users when applying discount coupons. The focus is on whether a user can bypass the validation that should apply special rules or discounts exclusively for first-time users."
  details: |
    "The test involves applying a discount coupon intended for first-time users and checking whether the system correctly validates the same."
  impact: |
    "Bypassing first user validation can lead to misuse of promotional offers and discounts, potentially resulting in financial losses and reduced effectiveness of marketing strategies. If the system allows non-first-time users to access discounts intended for new customers, it undermines the integrity of promotional campaigns and can lead to fraudulent activities. Proper enforcement of user validation checks is essential to ensure that discounts and promotions are applied correctly and that business rules are upheld."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: BYPASS_FIRST_USER_VALIDATION
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: STANDARD
  duration: FAST


api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_payload:
    for_one:
      key:
        regex: "${probableInputParameters}"
        extract: userKey
      value:
        extract: userVal

wordLists:
  probableInputParameters:
    - isFirstTime
    - firstTime
    - isFirstTimeUser
    - newUser
    - userStatus
    - initialUser
    - registrationStatus
    - userType
    - firstTimePurchase
    - newCustomer

  probableOutputFailParameters:
    - denied
    - failed
    - blocked
    - rejected
    - error
    - notAllowed
    - invalid
    - prohibited
    - notEligible
    - failedValidation

  probableOutputPassParameters:
    - success
    - bypassed
    - passed
    - successful
    - approved
    - accepted
    - granted
    - validated
    - processed
    - eligible

  responseErrorList:
    - Error
    - Internal Server
    - Failed
    - Unauthorized
    - access denied
    - Forbidden
    - Method Not allowed
    - Gateway timeout
    - request timeout
    - server error
    - server busy
    - authentication error
    - authorization error
    - validation error
    - Permission Denied
    - invalid token
    - token expired
    - session expired
    - session timeout
    - unexpected error
    - unable to process request
    - bad request
    - service unavailable
    - account is locked
    - account is blocked
    - multiple failed attempts
    - Attention Required!
    - CloudFlare
    - "Sorry, you have been blocked"

execute:
  type: multiple
  requests:
    - req:
        - modify_body_param:
            userKey: false
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains: ${responseErrorList}
              contains_either: ${probableOutputFailParameters}
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: true
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains: ${responseErrorList}
              contains_either: ${probableOutputPassParameters}
        - success: vulnerable
