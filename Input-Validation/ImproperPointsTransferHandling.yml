id: IMPROPER_POINTS_TRANSFER_HANDLING
info:
  name: "Improper Loyalty/Referral Points Transfer Handling"
  description: |
    "This test assesses whether the system properly manages the transfer of loyalty or referral points between users. The goal is to identify potential weaknesses that could allow unauthorized or improper transfer of points, potentially leading to fraud or abuse of the loyalty program."
  details: |
    "The test involves sending API requests to transfer points from one user to another to check if the system correctly validates the source and destination users and the amount of points being transferred."
  impact: |
    "Improper handling of points transfers can lead to fraudulent activities, such as unauthorized transfers, manipulation of loyalty or referral programs, and potential financial losses. If users can transfer points without proper validation, it undermines the integrity of the points system, leading to customer dissatisfaction, reduced program effectiveness, and possible reputation damage. Ensuring robust validation and monitoring of points transfers is essential to prevent abuse and maintain trust in the loyalty program."

  category:
    name: INPUT
    shortName: Input Validation
    displayName: Input Validation (INPUT)
  subCategory: IMPROPER_POINTS_TRANSFER_HANDLING
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-project-developer-guide/draft/design/web_app_checklist/validate_inputs/
  cwe:
    - CWE-20
  cve:
    - CVE-2018-20679
    - CVE-2019-14271
attributes:
  nature: INTRUSIVE
  plan: STANDARD
  duration: FAST
compliance_standards: compliance/input-validation.conf

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: OPTIONS
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_payload:
    and:
      - contains_either: "${probableInputParameters}"
      - for_one:
          key:
            regex: "${probableFromParameters}"
            extract: userKey1
      - for_one:
          key:
            regex: "${probableToParameters}"
            extract: userKey2
wordLists:
  probableInputParameters:
    - points
    - pointsBalance
    - loyaltyPoints
    - referralPoints
    - rewardPoints
    - bonusPoints
    - accumulatedPoints
    - availablePoints
    - transferablePoints
    - pointsToTransfer
    - userPoints

  probableOutputPassParameters:
    - pointsTransferred
    - transferred
    - pointsMoved
    - transferSuccess
    - pointsSent
    - pointsExchangeComplete
    - transferConfirmed
    - pointsProcessed

  probableFromParameters:
    - fromUserId
    - fromUser
    - fromAccount
    - senderUserId
    - senderAccount
    - userFrom
    - sourceUser
    - sourceAccount
    - originUserId
    - originAccount

  probableToParameters:
    - toUserId
    - toUser
    - toAccount
    - receiverUserId
    - recipientAccount
    - userTo
    - destinationUser
    - destinationAccount
    - targetUserId
    - targetAccount

  fromUserIds:
    source: sample_data
    key:
      regex: fromUserId|fromUser|fromAccount|senderUserId|senderAccount|userFrom|sourceUser|sourceAccount|originUserId|originAccount
    location: payload

  toUserIds:
    source: sample_data
    key:
      regex: toUserId|toUser|toAccount|receiverUserId|recipientAccount|userTo|destinationUser|destinationAccount|targetUserId|targetAccount
    location: payload

execute:
  type: single
  requests:
    - req:
        - modify_body_param:
            userKey1: ${fromUserIds}
        - modify_body_param:
            userKey2: ${toUserIds}

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - Attention Required!
      - CloudFlare
      - "Sorry, you have been blocked"
    contains_either: ${probableOutputPassParameters}
