id: JWT_HEADER_PARAM_INJECTION_JWK
info:
  name: "Authentication Bypass using JWT Header Param Injection with JWK"
  description: > 
    "Authentication Bypass using JWT Header Param Injection with JWK is a security 
    exploit where attackers manipulate JSON Web Token (JWT) headers, injecting 
    malicious content. By compromising or introducing a rogue JSON Web Key (JWK), 
    the attackers can exploit vulnerabilities in the authentication process, 
    potentially gaining unauthorized access. Proper validation of JWT signatures 
    and safeguarding JSON Web Keys is essential to mitigate the risk of such exploits."
  details: >
    "Authentication Bypass using JWT Header Param Injection with JWK is a security 
    vulnerability where attackers manipulate JSON Web Token (JWT) headers, inserting 
    malicious data. Exploiting this flaw, especially with a compromised JSON Web Key 
    (JWK), allows unauthorized access by tricking the authentication system. 
    Mitigation involves strict validation of JWT signatures and securing JSON 
    Web Keys to prevent such exploitation."
  impact: >
    "The impact of Authentication Bypass using JWT Header Param Injection with JWK 
    can be severe, leading to unauthorized access and potential compromise of 
    sensitive information. Exploiting this vulnerability allows attackers to 
    impersonate legitimate users, bypassing authentication mechanisms. The 
    compromised security may result in unauthorized data access, system 
    manipulation, and potential privacy breaches, underscoring the critical 
    importance of promptly addressing and patching such vulnerabilities."
  remediation: "To mitigate Authentication Bypass using JWT Header Param Injection with JWK, implement proper validation of JWT signatures and safeguard JSON Web Keys (JWKs). Ensure that JWT signatures are validated using trusted keys and algorithms, and that only authorized JWKs are accepted by the authentication process. Regularly review and update the authentication mechanisms to address any identified vulnerabilities and enhance security measures. Additionally, consider implementing additional security controls such as rate limiting and monitoring for suspicious activity to detect and prevent unauthorized access attempts."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: JWT_HEADER_PARAM_INJECTION_JWK
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901

auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  request_headers:
    for_one:
      value:
        contains_jwt: true
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
execute:
  type: single
  requests:
  - req:
      replace_auth_header: "${auth_context.jwk_added_token}"
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    percentage_match_schema:
      gte : 90
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
strategy:
  run_once: /