id: USER_ENUM_INVALID_CAPTCHA
info:
  name: "Broken Authentication Test - Username Enumeration on Captcha Endpoint"
  description: >
    "This test assesses a system's security by probing the authentication process.  Testers attempt to exploit vulnerabilities by submitting authentication requests  with valid and invalid usernames at the Captcha endpoint. The goal is to evaluate  the effectiveness of the Captcha mechanism in preventing user enumeration and  enhancing overall authentication security."
  details: >
    "This test focuses on evaluating a system's resilience against username enumeration attacks.  Testers attempt to exploit potential vulnerabilities by submitting authentication requests  with valid and invalid usernames specifically at the Captcha endpoint. This targeted  assessment aims to determine the effectiveness of the Captcha mechanism in thwarting  automated enumeration attempts, ensuring robust authentication security."
  impact: >
    "A successful Broken Authentication Test - Username Enumeration on Captcha Endpoint can  have severe consequences. By circumventing the Captcha mechanism, attackers may exploit  username enumeration to gain unauthorized access. This could lead to compromised user  accounts, unauthorized data access, and potential security breaches. Addressing such  vulnerabilities is critical for safeguarding user privacy and maintaining the integrity  of the authentication process."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: USER_ENUM_INVALID_CAPTCHA
  severity: MEDIUM
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
    - "https://cwe.mitre.org/data/definitions/798.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2023-3897
    - CVE-2023-40758

attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(a)(2)(i)
    - 45 CFR ยง 164.308(a)(5)(ii)(C)
  SOC 2:
    - Logical and Physical Access Controls
    - User Authentication Mechanisms
  PCI DSS:
    - Requirement 8
    - Requirement 10
  ISO 27001:
    - A.9.2.2
    - A.9.4.3
  NIST 800-53:
    - IA-2
    - IA-5
  CSA CCM:
    - IAM-03
    - IAM-06
  CIS Controls:
    - IG1 Safeguard 5.1
    - IG1 Safeguard 5.4
    - IG2 Safeguard 16.11
  FedRAMP:
    - IA-2
    - IA-5
  NIST 800-171:
    - 3.5.1
    - 3.5.2
  FISMA:
    - IA-2
    - IA-5
  Cybersecurity Maturity Model Certification (CMMC):
    - IA.1.076
    - IA.2.078
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: "OPTIONS"
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  url:
    contains_either:
      - login
      - signin
      - authenticate
      - auth
  and:
    - request_payload:
        for_one:
          key:
            regex: "username|^user$|^userid$|^user_id$|^login$|^login_id$|email|^account$|^account_id$|^member$|^member_id$|^id$|^user_name$|^uname$|^identifier$|^user_identifier$|^admin$|^nickname$|^handle$|^alias$|^principal$|^profile$|^profile_id$|^name$|^signin$|^auth$|^credential$|^user_login$|^user_account$|^user_email$|^employee$|^employee_id$|^operator$|^customer_id$|^subscriber$|^subscriber_id$|^participant$|^participant_id$|client_id|^userLoginID$|^client-name$"
            extract: userKey
          value:
            regex: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    - request_payload:
        for_one:
          key:
            regex: "captcha"
            extract: captchaKey
execute:
  type: multiple
  requests:
    - req:
        - modify_body_param:
            captchaKey: "0000"
        - validate:
            response_code:
              gte: 400
              lt: 410
            response_payload:
              not_contains:
                - acccount is locked
                - account is blocked
                - multiple failed attempt
                - rate limit
                - rate-limit
                - rate_limit
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: dummymail@dummy.com
            captchaKey: "0000"
        - validate:
            response_payload:
              neq: "${x1.response.body}"
              not_contains:
                - account is locked
                - account is blocked
                - multiple failed attempt
                - rate limit
                - rate-limit
                - rate_limit
            response_code:
              eq: "${x1.response.status_code}"
        - success: vulnerable
