id: SQLI_ERROR_BASED_PARAM_POSTGRESQL
info:
  name: "Error Based SQL Injection test for Parameters for PostgreSQL"
  description: >
    "Some API endpoints expecting parameter values might be directly exposed to PostgreSQL. Attackers can trigger an error by breaking the structure of the functions\' parameters used for communicating with the database."
  details: >
    "Some API endpoints expecting parameter values might be directly exposed to PostgreSQL. Causing an error in SQL query syntax can expose the underlying query or DB data."
  impact: >
    "Possible data leakage due to illegal DB access. Successful SQL injection attacks may completely compromise or destroy a system."
  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: SQLI_ERROR_BASED_PARAM_POSTGRESQL
  severity: MEDIUM
  tags:
    - Injection Attack
    - OWASP Top 10
    - HackerOne Top 10
  references:
    - "https://github.com/sqlmapproject/sqlmap/blob/master/data/xml/errors.xml"
    - "https://brightsec.com/blog/error-based-sql-injection/"
  cwe:
    - CWE-943
    - CWE-89
  cve:
    - CVE-2023-39417

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    contains_either:
      - POST
      - GET
      - PUT
      - PATCH
  or:
    - request_payload:
        for_one:
          key:
            regex: .*
            extract: changed_body_key
    - query_param:
        for_one:
          key:
            regex: .*
            extract: changed_query_key
wordLists:
  specialCharacters:
    - "'"
    - "\""
    - "$"
    - "."
    - ">"
    - "--"
    - ";"
execute:
  type: single
  requests:
    - req:
        - modify_body_param: 
            changed_body_key: ${specialCharacters}
        - modify_query_param:
            changed_query_key: ${specialCharacters}
validate:
  or:
    - response_payload:
        regex: "PostgreSQL.*?ERROR"
    - response_payload:
        regex: "Warning.*?\\Wpg_"
    - response_payload:
        regex: "valid PostgreSQL result"
    - response_payload:
        regex: "Npgsql\\."
    - response_payload:
        regex: "PG::SyntaxError:"
    - response_payload:
        regex: "org\\.postgresql\\.util\\.PSQLException"
    - response_payload:
        regex: "ERROR:\\s\\ssyntax error at or near"
    - response_payload:
        regex: "ERROR: parser: parse error at or near"
    - response_payload:
        regex: "PostgreSQL query failed"
    - response_payload:
        regex: "org\\.postgresql\\.jdbc"
    - response_payload:
        regex: "Pdo[./_\\]Pgsql"
    - response_payload:
        regex: "PSQLException"