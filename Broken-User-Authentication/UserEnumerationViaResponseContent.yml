id: USER_ENUM_RESPONSE_CONTENT
info:
  name: "Broken Authentication Test - Username Enumeration via Different response content"
  description: >
    "Username Enumeration via Different Response Content involves scrutinizing authentication  responses for variations in content when submitting requests with valid and invalid usernames.  Testers analyze response discrepancies, such as distinct error messages or timing variations,  to identify potential vulnerabilities. This method aims to pinpoint weaknesses in the  authentication process that could inadvertently reveal information about valid user accounts,  enhancing overall security measures against unauthorized access."
  details: >
    "This test involves analyzing system responses to authentication requests with  valid and invalid usernames. Testers focus on variations in response content, such  as error messages or timing, to uncover potential vulnerabilities. This testing  method aims to enhance security by identifying and mitigating risks associated  with unintentional disclosure of valid username information during the authentication process."
  impact: >
    "The impact of a successful Broken Authentication Test - Username Enumeration via Different  Response Content can be significant. Exploiting response variations may disclose valid usernames,  aiding attackers in targeted unauthorized access attempts. This vulnerability could lead to  compromised user accounts, potential data breaches, and a heightened risk of unauthorized  system entry. Addressing these issues is crucial for maintaining robust authentication security  and safeguarding against the inadvertent exposure of sensitive user information."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: USER_ENUM_RESPONSE_CONTENT
  severity: CRITICAL
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2023-3897
    - CVE-2023-40758

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST


api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    neq: "OPTIONS"
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  url:
    contains_either:
      - login
      - signin
      - authenticate
      - auth
  and:
    - request_payload:
        for_one:
          key:
            regex: "username|^user$|^userid$|^user_id$|^login$|^login_id$|email|^account$|^account_id$|^member$|^member_id$|^id$|^user_name$|^uname$|^identifier$|^user_identifier$|^admin$|^nickname$|^handle$|^alias$|^principal$|^profile$|^profile_id$|^name$|^signin$|^auth$|^credential$|^user_login$|^user_account$|^user_email$|^employee$|^employee_id$|^operator$|^customer_id$|^subscriber$|^subscriber_id$|^participant$|^participant_id$|client_id|^userLoginID$|^client-name$"
            extract: userKey
          value:
            regex: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    - request_payload:
        for_one:
          key:
            regex: "password|^pass$|^pwd$|^user_password$|^userpass$|passwd|^user_pwd$|^password1$|^userPass$|^login_password$|^loginpassword$|^user_pass$|^access_password$|^secret$|^user_secret$|^code$|^token$"
            extract: passKey
execute:
  type: multiple
  requests:
    - req:
        - modify_body_param:
            passKey: Default1!
        - validate:
            or:
              - response_code:
                  gte: 400
                  lt: 410
              - response_payload:
                  not_contains:
                    - Error
                    - fail
                    - invalid
                    - expired
                    - not found
                    - account is locked
                    - account is blocked
                    - rate-limit
                    - rate_limit
                    - rate limit
                    - multiple failed attempt
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: "dummymail@dummy.com"
        - modify_body_param:
            passKey: Default1!
        - validate:
            response_payload:
              neq: "${x1.response.body}"
              not_contains:
                - rate-limit
                - rate limit
                - rate_limit
                - account is locked
                - account is blocked
                - multiple failed attempt
        - success: x3
        - failure: exit
    - req:
        - modify_body_param:
            userKey: "dummymail@dummy.com"
        - modify_body_param:
            passKey: Default2!
        - validate:
            response_payload:
              eq: "${x2.response.body}"
              not_contains:
                - rate-limit
                - rate limit
                - rate_limit
                - account is locked
                - account is blocked
                - multiple failed attempt
        - success: vulnerable
