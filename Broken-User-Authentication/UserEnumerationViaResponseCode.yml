id: USER_ENUM_HTTP_CODES
info:
  name: "Broken Authentication Test - Username Enumeration via Different HTTP response codes"
  description: > 
    "In this test, testers assess a system's security by analyzing how it responds to authentication 
    requests with valid and invalid usernames. The focus is on variations in HTTP response codes, 
    revealing potential vulnerabilities in the username enumeration process. Identifying 
    and addressing these issues is crucial for bolstering authentication security and 
    preventing the unintentional exposure of valid username information."
  details: >
    "This test assesses a system's security by analyzing responses to authentication requests 
    with various usernames. Testers focus on distinct HTTP response codes for valid and invalid 
    attempts, revealing potential vulnerabilities. Identifying and addressing these issues is 
    vital for strengthening authentication security and preventing inadvertent disclosure of 
    valid username information."
  impact: >
    "A successful Broken Authentication Test - Username Enumeration via Different HTTP Response Codes 
    could have significant consequences. Exploiting variations in response codes may expose valid 
    usernames, aiding attackers in targeted unauthorized access. This vulnerability could lead 
    to compromised user accounts, potential data breaches, and an increased risk of unauthorized 
    system entry. Addressing these issues promptly is crucial to maintaining robust authentication 
    security and preventing the inadvertent exposure of sensitive user information."
  remediation: "To mitigate username enumeration via different HTTP response codes, ensure that the response code for both existing and non-existing usernames is the same. Avoid providing different response codes that could indicate the existence of a username. Implement rate limiting and account lockout mechanisms to prevent brute force attacks. Regularly review and update security measures to address any identified vulnerabilities and enhance overall system security."
  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: USER_ENUM_HTTP_CODES
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  url:
    contains_either:
      - login
      - signin
      - authenticate
      - auth
  and:
    - request_payload:
        for_one:
          key:
            regex: "^username$|^user$|^userid$|^user_id$|^login$|^login_id$|^email$|^account$|^account_id$|^member$|^member_id$|^id$|^user_name$|^uname$|^identifier$|^user_identifier$|^admin$|^nick$|^nickname$|^handle$|^alias$|^principal$|^profile$|^profile_id$|^name$|^signin$|^auth$|^credential$|^user_login$|^user_account$|^user_email$|^employee$|^employee_id$|^operator$|^customer_id$|^client_id$|^subscriber$|^subscriber_id$|^participant$|^participant_id$|^client_id$|^userLoginID$|^client-name$"
            extract: userKey
    - request_payload:
        for_one:
          key:
            regex: "^password$|^pass$|^pwd$|^user_password$|^userpass$|^passwd$|^user_pwd$|^password1$|^userPass$|^login_password$|^loginpassword$|^user_pass$|^access_password$|^secret$|^user_secret$"
            extract: passKey
wordLists:
  dummyUsernames:
    - dummy
    - "dummymail@dummy.com"
execute:
  type: multiple
  requests:
  - req:
    - modify_body_param:
        password: Default1!
    - validate:
        response_code:
          gte: 400
          lt: 410
        response_payload:
          not_contains_either:
            - rate limit
            - rate_limit
            - rate-limit
            - multiple failed attempt
            - account is locked
            - account is blocked
    - success: x2
    - failure: exit
  - req:
    - modify_body_param:
        email: ${dummyUsernames}
        password: Default1!
    - validate:
        response_code:
          neq: "${x1.response.status_code}"
    - success: vulnerable