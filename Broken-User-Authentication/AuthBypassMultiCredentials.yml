id: AUTH_BYPASS_MULTI_CREDENTIAL
info:
  name: "Authentication Bypass by sending multiple credentials in parameters"
  description: > 
    "Authentication Bypass by sending multiple credentials in parameters is a security 
    vulnerability where attackers attempt to exploit authentication systems by submitting 
    multiple sets of credentials simultaneously. By manipulating parameters, such as 
    username and password, attackers aim to circumvent authentication controls and 
    gain unauthorized access. This method underscores the importance of input validation 
    and secure authentication processes to prevent such credential-based attacks, 
    fortifying the overall security of the system against unauthorized entry."
  details: >
    "Authentication Bypass by sending multiple credentials in parameters is a security 
    risk where attackers manipulate authentication mechanisms by submitting various 
    sets of credentials concurrently. By altering parameters, such as username and 
    password, adversaries attempt to evade authentication controls, leading to potential 
    unauthorized access. Effective input validation and robust authentication protocols 
    are essential countermeasures to thwart such attacks, ensuring the integrity of 
    user authentication processes and bolstering overall system security."
  impact: >
    "The impact of Authentication Bypass by sending multiple credentials in parameters 
    is significant, as it can lead to unauthorized access and potential compromise of 
    user accounts. Exploiting this vulnerability may allow attackers to circumvent 
    authentication controls, posing a risk to the confidentiality and integrity of 
    sensitive information. Implementing stringent input validation checks and adopting 
    secure authentication practices is crucial to mitigate this threat, safeguard user 
    credentials, and maintain the overall security of the system."
  remediation: "To mitigate Authentication Bypass by sending multiple credentials in parameters, implement strict input validation in the authentication system. Ensure that parameters like username and password are properly sanitized to prevent manipulation. Enforce secure authentication processes to detect and reject unauthorized access attempts, fortifying the system's security against credential-based attacks. Regular security assessments can help identify and address potential vulnerabilities, enhancing overall system security."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: AUTH_BYPASS_MULTI_CREDENTIAL
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901
api_selection_filters:
  response_code:
    gte: 200
    lte: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  url:
    contains_either:
      - login
      - signin
      - authenticate
      - auth
  request_payload:
    for_one:
      key:
        regex: "^password$|^pass$|^pwd$|^user_password$|^userpass$|^passwd$|^user_pwd$|^password1$|^userPass$|^login_password$|^loginpassword$|^user_pass$|^access_password$|^secret$|^user_secret$"
        extract: passwordkey
    extract: respbody
execute:
  type: single
  requests:
  - req:
    - modify_body_param:
        passwordkey:
        - "${respbody}"
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    percentage_match_schema:
      gt: 90
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts