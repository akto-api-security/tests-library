id: ADD_JKU_TO_JWT
info:
  name: "JWT authentication bypass via jku header injection"
  description: "Since Host server is using the JKU field of the JWT without validating, attacker can tamper with the payload of JWT and access protected resources."
  details: >
            "The endpoint appears to be vulnerable to broken authentication attack.The original request was replayed by adding the JKU parameter value to the header of
            JWT and signing with Akto's key. The server responded with 2XX success codes. This indicates that this endpoint can be accessed with a tampered JWT.<br>"
            "<b>Background:</b> The JSON Web Signature specification defines the optional \"jku\" header, which contains a URL pointing to a set of keys used by the server to digitally sign
            the JWT. This parameter is particularly useful for servers that are configured to use multiple different keys because it can help to determine which key to use when verifying the
            signature. If the target application implicitly trusts this header, it may verify the signature using an arbitrary public key obtained from the provided URL, essentially relying
            on data that can be tampered with client-side. A malicious user could insert or modify a \"jku\" header so that it points to an external server containing a JSON Web Key Set that
            they've generated themselves. They could then re-sign the token using the matching private key and check whether the server still accepts it."
  impact: > 
            "Using this vulnerability an attacker can do a full account takeover. <br><br>"
            "They can also exploit this vulnerability by supplying an arbitrary claim in the JWT payload to escalate their privileges or impersonate other users. For example,
            if the token contains a \"username\": \"joe\" claim, they could change this to \"username\": \"admin\"."
  remediation: "To mitigate this vulnerability, the host server should implement proper validation of the \"jku\" field in the JWT. The server should only accept JWT tokens with trusted \"jku\" URLs, or preferably, avoid relying on the \"jku\" header altogether if it's not necessary. Additionally, the server should ensure that the JWT signature is verified using a trusted set of keys and not simply accept keys obtained from external URLs. Regularly monitor and update security measures to stay protected against potential attacks."
  category:
    name: NO_AUTH
    shortName: Broken User Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: ADD_JKU_TO_JWT
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://redhuntlabs.com/a-practical-guide-to-attack-jwt-json-web-token"
    - "https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jku-header-injection"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
  cwe:
    - CWE-287
    - CWE-295
  cve:
    - CVE-2018-0114

auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  request_headers:
    for_one:
      value:
        contains_jwt: true
execute:
  type: single
  requests:
    - req:
        replace_auth_header: ${auth_context.jku_added_token}
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
