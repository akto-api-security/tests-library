id: 2FA_BROKEN_LOGIC_AUTH_TOKEN_TEST
info:
  name: "Authentication Bypass with 2FA Broken Logic Auth Token by hitting Authenticated APIs"
  description: > 
    "Authentication Bypass with 2FA Broken Logic occurs when attackers exploit flaws 
    in the two-factor authentication (2FA) system, gaining unauthorized access to 
    authenticated APIs by manipulating authentication tokens. By exploiting broken 
    logic in the 2FA process, attackers can bypass the intended security measures 
    and potentially compromise sensitive information or functionalities. This 
    vulnerability emphasizes the critical need for robust and secure implementation 
    of two-factor authentication mechanisms to prevent unauthorized access to protected systems."
  details: >
    "Authentication Bypass with 2FA Broken Logic involves attackers exploiting 
    vulnerabilities in a two-factor authentication (2FA) system to gain unauthorized 
    access to authenticated APIs. By manipulating authentication tokens and taking 
    advantage of flaws in the 2FA process, attackers can bypass intended security 
    measures, posing a serious risk of unauthorized data access or system compromise. 
    Mitigation requires thorough examination and enhancement of the 2FA implementation 
    to ensure a robust and effective defense against potential authentication bypass threats."
  impact: >
    "The impact of Authentication Bypass with 2FA Broken Logic is severe, as it 
    allows attackers to circumvent the intended security measures of a two-factor 
    authentication system. Exploiting this vulnerability could lead to unauthorized 
    access to authenticated APIs, risking compromise of sensitive data and system 
    integrity. To mitigate such risks, it is crucial to promptly address and 
    rectify the broken logic in the 2FA process, ensuring a robust defense 
    against potential authentication bypass threats and maintaining the overall 
    security of the authentication mechanism."
  remediation: "To mitigate Authentication Bypass with 2FA Broken Logic, ensure a robust implementation of two-factor authentication (2FA) mechanisms. Implement secure token generation and validation processes to prevent manipulation of authentication tokens. Regularly review and update the 2FA system to address any identified vulnerabilities and strengthen security measures. Additionally, conduct thorough testing and monitoring to detect and prevent unauthorized access attempts, safeguarding sensitive information and functionalities."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: 2FA_BROKEN_LOGIC_AUTH_TOKEN_TEST
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
execute:
  type: single
  requests:
    - req:
      - modify_header:
          ${roles_access_context.LOGIN_2FA_INCOMPLETE_SYSTEM_ROLE}: 1       
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    percentage_match:
      gte: 90
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
