id: AUTH_BYPASS_MULTI_CREDENTIAL_SINGLE_PARAM
info:
  name: "Authentication Bypass by sending multiple credentials in a single parameter"
  description: > 
    "Authentication Bypass by sending multiple credentials in a single parameter is a 
    security loophole where attackers manipulate authentication systems by combining 
    various sets of credentials within a unified parameter. This method seeks to 
    undermine authentication controls, potentially enabling unauthorized access. 
    Mitigating this vulnerability requires robust input validation and adherence 
    to secure authentication practices, crucial for preserving the integrity 
    of user authentication processes and enhancing overall system security."
  details: >
    "Authentication Bypass by sending multiple credentials in a single parameter is a 
    security risk where attackers attempt to manipulate authentication systems by 
    consolidating various sets of credentials within a unified parameter. This tactic 
    aims to subvert authentication controls and gain unauthorized access. Implementing 
    robust input validation and adopting secure authentication practices are critical 
    measures to mitigate this vulnerability, fortifying the integrity of user 
    authentication processes and enhancing overall system security."
  impact: >
    "The impact of Authentication Bypass by sending multiple credentials in a single 
    parameter is significant, as it can lead to unauthorized access and potential 
    compromise of user accounts. This vulnerability allows attackers to subvert 
    authentication controls, posing a risk to the confidentiality and integrity 
    of sensitive information. Implementing strict input validation and reinforcing 
    secure authentication practices is essential to mitigate this threat, safeguard 
    user credentials, and uphold the overall security of the system."
  remediation: "To mitigate Authentication Bypass by sending multiple credentials in a single parameter, enforce strict input validation in the authentication system to prevent manipulation. Ensure that parameters are securely handled to resist combining multiple credentials. Adhere to secure authentication practices, such as strong encryption and secure token management, to thwart unauthorized access attempts. Maintaining robust input validation and authentication practices is essential for preserving the integrity of user authentication and enhancing overall system security."
  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: AUTH_BYPASS_MULTI_CREDENTIAL_SINGLE_PARAM
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901
api_selection_filters:
  response_code:
    gte: 200
    lte: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  url:
    contains_either:
      - login
      - signin
      - authenticate
      - auth
  request_payload:
    for_one:
      key:
        regex: "^password$|^pass$|^pwd$|^user_password$|^userpass$|^passwd$|^user_pwd$|^password1$|^userPass$|^login_password$|^loginpassword$|^user_pass$|^access_password$|^secret$|^user_secret$"
        extract: passwordKey
      value:
        extract: passwordVal
execute:
  type: single
  requests:
  - req:
    - modify_body_param:
        passwordKey:
        - "${passwordVal}"
        - random
        - "123456"
        - qwerty
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    percentage_match_schema:
      gte: 90
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts