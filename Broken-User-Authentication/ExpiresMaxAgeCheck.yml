id: EXPIRES_MAX_AGE_CHECK
info:
  name: "Session Token storing via Persistent Cookie test"
  description: > 
    "If a session token is stored as a persistent cookie, it can potentially pose a 
    security risk, constituting a broken authentication issue. Persistent cookies 
    remain on a user's device for an extended period, making them susceptible 
    to theft or unauthorized access. An attacker could exploit this vulnerability 
    by obtaining the persistent session token, leading to unauthorized account 
    access and compromise of user authentication, emphasizing the importance 
    of secure session management practices to mitigate such risks."
  details: >
    "Storing a session token as a persistent cookie raises security concerns, 
    potentially constituting a broken authentication issue. Persistent cookies, 
    lasting beyond a single session, may be vulnerable to theft or unauthorized 
    access. Exploiting this vulnerability could allow attackers to gain 
    unauthorized entry, compromising user authentication. To mitigate such risks, 
    it is crucial to adopt secure session management practices, including 
    using short-lived session tokens and implementing robust security measures."
  impact: >
    "The impact of storing a session token as a persistent cookie, leading to a 
    broken authentication scenario, can be severe. It exposes users to the 
    risk of unauthorized access, allowing attackers to exploit stolen session 
    tokens for prolonged periods. This could result in compromised user accounts, 
    unauthorized transactions, and potential breaches of sensitive information, 
    underscoring the critical need for secure session management to safeguard 
    user authentication and privacy."
  remediation: "To mitigate the security risk posed by storing session tokens as persistent cookies, implement secure session management practices. Use short-lived session tokens instead of persistent ones to reduce the window of vulnerability. Implement measures such as HTTPS-only cookies and HTTP Strict Transport Security (HSTS) to protect session data in transit. Additionally, consider implementing additional security controls such as token rotation or multi-factor authentication to further protect against unauthorized access. Regularly review and update session management practices to address emerging threats and maintain the security of user authentication."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: EXPIRES_MAX_AGE_CHECK
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  response_headers:
    for_one:
      key:
        eq: set-cookie
execute:
  type: single
  requests:
  - req: []
validate:
  response_code:
    gte: 200
    lt: 300
  response_headers:
    for_one:
      key:
        eq: set-cookie
      value:
        cookie_expire_filter: true
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts