id: DJANGO_ADMIN_PANEL_DETECTION
info:
  name: "Django Admin Panel Detection Test"
  description: "Django Admin Panel Detection Test involves identifying the presence of the Django framework's default admin interface in a web application. This test typically focuses on locating the `/admin` endpoint, which is often exposed by default. Detecting the admin panel is critical for assessing its security posture, as attackers could target it with brute-force or credential-stuffing attacks if left unprotected. Proper configuration and access restrictions mitigate such risks."
  details: "The Django Admin Panel Detection Test identifies the existence and accessibility of the admin interface, typically located at `/admin`. This involves sending requests to common endpoints, analyzing HTTP responses, or observing default admin page elements. Detecting the panel helps evaluate if it is properly secured through methods like URL obfuscation, strong authentication, and IP restrictions, reducing the risk of unauthorized access or exploitation."
  impact: "The impact of an exposed Django Admin Panel can be severe, as it provides attackers with potential access to critical application data and administrative controls. If not properly secured, it may be vulnerable to brute-force attacks, credential stuffing, or privilege escalation. An insecure admin panel can lead to data breaches, unauthorized changes to the application, or complete system compromise, posing significant risks to the organizationâ€™s security."
  category:
    name: SM
    shortName: Misconfiguration
    displayName: Security Misconfiguration (SM)
  subCategory: DJANGO_ADMIN_PANEL_DETECTION
  severity: LOW
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa8-security-misconfiguration.md"
  cwe:
    - CWE-200
    - CWE-213
  cve:
    - CVE-2018-10245


attributes:
  nature: NON-INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
wordLists:
  paths:
    - '/admin/login/'
execute:
  type: single
  requests:
    - req:
        - modify_url: "${paths}"
        - modify_method: GET
        - replace_body: '{}'
        - follow_redirect: true
validate:
  response_code:
    eq: 200
  response_payload:
    length:
      gt: 0
    contains_either:
      - "| django administration"
      - "| django-administration"
      - "django-admin-interface"
      - "<span>django administration</span>"
strategy:
  run_once: /
