id: SOURCE_CODE_DISCLOSURE_WEB_INF
info:
  name: "Source Code Disclosure via WEB-INF"
  description: >
    "This scan identifies potential disclosure of source code through the improper exposure of files located in the `WEB-INF` directory. The `WEB-INF` directory is typically used in Java-based web applications to store configuration files and other sensitive data. If access to files in this directory is not properly restricted, attackers may gain access to source code or sensitive configuration information."
  details: >
    "The `WEB-INF` directory in a Java web application should be protected from direct access via the web server. Files within this directory may include configuration settings, source code, or other sensitive information that should not be publicly accessible. If the web server is misconfigured, files within `WEB-INF` may be exposed to unauthorized users, leading to source code disclosure or the leakage of sensitive information, such as database connection strings, credentials, or other configuration details."
  impact: >
    "Source code disclosure via the `WEB-INF` directory can lead to significant security risks. Attackers who gain access to the source code of an application can identify vulnerabilities, such as SQL injection points, authentication weaknesses, or business logic flaws. This can lead to the compromise of the application and its data, allowing attackers to manipulate the application or escalate their privileges. Properly securing the `WEB-INF` directory is essential to preventing unauthorized access to critical application components."

  category:
    name: SM
    shortName: Misconfiguration
    displayName: Security Misconfiguration (SM)
  subCategory: SOURCE_CODE_DISCLOSURE_WEB_INF
  severity: LOW
  references:
    - https://owasp.org/www-community/attacks/Forced_browsing
    - https://cwe.mitre.org/data/definitions/425.html
  cwe:
    - CWE-200
    - CWE-213
  cve:
    - CVE-2018-10245

attributes:
  nature: NON_INTRUSIVE
  plan: FREE
  duration: FAST


api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  url:
    extract: urlVar

wordLists:
  filePath:
    - web.xml
    - application.xml

execute:
  type: single
  requests:
    - req:
        - modify_url: ${urlVar}/WEB-INF/${filePath}
  # IMPROVEMENT: extract the java class name and attempt to find it.

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    regex: ".*java.*"
    length:
      gt: 0
    not_contains:
      - <html>
      - </html>
