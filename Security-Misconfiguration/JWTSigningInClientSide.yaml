id: JWT_SIGNING_IN_CLIENT_SIDE
info:
  name: JWT signing in client side
  description: "This test checks for JWT client side signing"
  details: >
    "Client-side JWT signing test: verifies if the code includes JWT signing functions.
    This ensures the implementation of secure token signing mechanisms within the client-side application."
  impact: "An attacker could potentially exploit the client-side JWT signing vulnerability to manipulate or forge JWT tokens, leading to unauthorized access, privilege escalation, session hijacking, or impersonation attacks. It is crucial to address this vulnerability promptly to protect the integrity and security of the system."
  category:
    name: SM
    shortName: Misconfiguration
    displayName: Security Misconfiguration (SM)
  subCategory: JWT_SIGNING_IN_CLIENT_SIDE
  severity: LOW
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://hackerone.com/reports/638635"
  cwe:
    - CWE-287
    - CWE-347

attributes:
  nature: NON_INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
    - 45 CFR ยง 164.312(a)(2)(i)
  SOC 2:
    - System Configuration and Management Controls
    - Access and Authorization Settings
  PCI DSS:
    - Requirement 2.2
    - Requirement 6.2
  ISO 27001:
    - A.12.1.1
    - A.12.6.2
  NIST 800-53:
    - CM-6
    - AC-17
  CSA CCM:
    - IVS-09
    - TVM-04
  CIS Controls:
    - IG1 Safeguard 4.6
    - IG1 Safeguard 5.5
  FedRAMP:
    - CM-6
    - AC-17
  NIST 800-171:
    - 3.4.6
    - 3.5.7
  FISMA:
    - CM-6
    - AC-17
  Cybersecurity Maturity Model Certification (CMMC):
    - CM.2.068
    - AC.2.008
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_payload:
    contains_either:
      - "jwt.sign("
      - "jose.JWS.createSign("
      - "JWTSimple.encode("
      - "jwt.encode("

execute:
  type: single
  requests:
    - req: []

validate:
  response_payload:
    contains_either:
      - "jwt.sign("
      - "jose.JWS.createSign("
      - "JWTSimple.encode("
      - "jwt.encode("
