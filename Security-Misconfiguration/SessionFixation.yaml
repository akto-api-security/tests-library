id: SESSION_FIXATION
info:
  name: Session fixation
  description: "This test detects vulnerabilities in web applications, ensuring proper session management and protection against attacks."
  details: >
            "The session fixation test focuses on identifying vulnerabilities associated with session fixation attacks. In this type of attack, token and cookie values remain unchanged for a user before and after logging into the application, making their cookies consistent. Attackers can replay the attack by injecting the same vector values before login, allowing them access after login. To mitigate session fixation, it is crucial to utilize distinct parameter values for enhanced security."
  impact: "The impact of the session fixation vulnerability can be significant, leading to unauthorized access and account compromise. Attackers can exploit fixed tokens and cookies, gaining control over user sessions and potentially manipulating sensitive data."
  remediation: "Session fixation vulnerabilities occur when an attacker sets a user's session identifier (SID) before the user logs in, thereby fixing the session to a predetermined value. Remediate this by employing session regeneration upon authentication, ensuring each user receives a new SID. Implement secure session management practices, such as using HTTPS and setting the \"HttpOnly\" and \"Secure\" flags for session cookies to prevent client-side access and transmission over insecure channels. Regularly monitor and log session activity to detect and mitigate any suspicious behavior."
  category:
    name: SM
    shortName: Misconfiguration
    displayName: Security Misconfiguration (SM)
  subCategory: SESSION_FIXATION
  severity: LOW
  tags: 
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://www.appsecmonkey.com/blog/session-fixation"
    - "https://hackerone.com/reports/2421"
  cwe:
    - CWE-384
  cve:
    - CVE-2021-35046
    - CVE-2021-46279

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  request_headers:
    for_one:
      key:
        eq: JSESSIONID
        extract:  session_key
      value: 
        extract: session_value
  url:
    contains_either:
      - login
      - signin
      - sign-in
      - log-in

execute:
  type: single
  requests:
    - req: []

validate:
  or:
    - response_headers:
        not_contains: set-cookie
    - response_headers:
        for_one:
          key:
            eq: set-cookie
          value: 
            contains_either: ${session_value}

