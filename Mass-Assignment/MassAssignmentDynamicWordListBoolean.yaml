id: BOOLEAN_MASS_ASSIGN_DYNAMIC_WORDLIST_EXPLOIT
info:
  name: "Mass Assignment Vulnerability Testing by Leveraging Boolean Values Extracted from Sample or Dynamic API Data"
  description: >
    "This test aims to fortify mass assignment vulnerability testing by utilizing boolean values  obtained either from sample data or dynamically fetched from API endpoints. By integrating  boolean data into vulnerability assessments, the robustness of security measures can be  significantly enhanced, enabling more comprehensive protection against unauthorized data  manipulation."
  details: >
    "This test involves injecting boolean values, retrieved either from sample data or dynamically  through API endpoints, into mass assignment vulnerability tests. By incorporating these  boolean data points, the effectiveness of vulnerability assessments is heightened, enabling  thorough scrutiny and mitigation of potential security risks associated with unauthorized  data manipulation."
  impact: >
    "Implementing boolean values from sample or dynamic API data into mass assignment  vulnerability testing can greatly enhance the accuracy and reliability of security  assessments. This approach empowers organizations to identify and mitigate vulnerabilities  more effectively, reducing the risk of unauthorized data tampering and bolstering  overall data security. By proactively addressing potential weaknesses, businesses can  safeguard sensitive information and maintain trust with their stakeholders."
  category:
    name: MA
    shortName: Mass Assignment
    displayName: Mass Assignment (MA)
  subCategory: BOOLEAN_MASS_ASSIGN_DYNAMIC_WORDLIST_EXPLOIT
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa3-broken-object-property-level-authorization.md"
  cwe:
    - CWE-915
  cve:
    - CVE-2023-32079
    - CVE-2023-42768
attributes:
  nature: INTRUSIVE
  plan: STANDARD
  duration: FAST
inactive: true
wordLists:
  ${extraKeys}:
    for_all:
      ${iteratorKey}.wordList:
        all_apis: true
        sample_data: true
        key: "${iteratorKey}"

api_selection_filters:
  response_code:
    gte: 200
    lt: 300
    extract: resp_code
  method:
    not_contains:
      - GET
      - OPTIONS
  request_payload:
    for_one:
      key:
        regex: .*
        extractMultiple: payloadKeys
  response_payload:
    for_one:
      key:
        not_contains: "${payloadKeys}"
        extractMultiple: extraKeys
      value:
        datatype: boolean
execute:
  type: single
  requests:
    - req:
        - ${extraKeys}:
            for_all:
              - add_body_param:
                  ${iteratorKey}: "${iteratorKey}.wordList"
validate:
  response_code:
    eq: ${resp_code}
  response_payload:
    for_one:
      key:
        contains_either: ${extraKeys}
