id: XSS_VIA_APPENDING_TO_QUERY_PARAMS
info:
  name: "XSS by appending to query parameters"
  description: "Testing vulnerability by appending malicious scripts into query parameters to bypass security measures and execute unauthorized code."
  details: >
    "Security test that aims to identify vulnerabilities in web applications. By appending malicious scripts into query parameters, attackers can bypass security measures and execute unauthorized code on the victim's browser."
    "This test helps developers uncover and address potential XSS (Cross-Site Scripting) vulnerabilities, ensuring robust protection against malicious attacks."
  impact: "An XSS vulnerability can have significant impacts, including the potential for data theft, unauthorized access, session hijacking, defacement of web pages, and the injection of malicious content."
  category:
    name: XSS
    shortName: XSS
    displayName: Cross-site scripting (XSS)
  subCategory: XSS_VIA_APPENDING_TO_QUERY_PARAMS
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-community/attacks/xss/"
    - "https://hackerone.com/reports/840759"
  cwe:
    - CWE-79
  cve:
    - CVE-2015-1159
    - CVE-2023-24737
    - CVE-2020-25495

attributes:
  nature: INTRUSIVE
  plan: FREE
  duration: FAST
compliance_standards:
  GDPR:
    - Article 32
    - Article 25
  HIPAA:
    - 45 CFR ยง 164.312(c)(1)
    - 45 CFR ยง 164.308(a)(1)(ii)(A)
  SOC 2:
    - System and Communication Security
    - Secure Application Development Controls
  PCI DSS:
    - Requirement 6.5.1
    - Requirement 6.5.7
  ISO 27001:
    - A.12.6.1
    - A.14.2.5
  NIST 800-53:
    - SI-10
    - SI-3
  CSA CCM:
    - APP-02
    - TVM-03
  CIS Controls:
    - IG1 Safeguard 16.2
    - IG2 Safeguard 18.3
  FedRAMP:
    - SI-10
    - CA-7
  NIST 800-171:
    - 3.14.1
    - 3.14.2
  FISMA:
    - SI-10
    - SI-3
  Cybersecurity Maturity Model Certification (CMMC):
    - SI.2.216
    - RA.3.141
api_selection_filters:
  method:
    contains_either:
      - "GET"

  response_payload:
    contains_either:
      - <!doctype html>

  query_param:
    for_one:
      key:
        regex: .*
        extract: query_param_key
      value:
        extract: query_param_val


execute:
  type: single
  requests:
    - req:
        - modify_query_param:
            query_param_key: ${query_param_val}%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E

validate:
  response_payload:
    contains_all:
      - "<script>alert(document.domain)</script>"
      - <!doctype html>
