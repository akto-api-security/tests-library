id: JAVAMELODY_XSS
info:
  name: "JavaMelody Cross-Site Scripting Vulnerability"
  description: "JavaMelody Cross-Site Scripting (XSS) Vulnerability refers to a security flaw where malicious scripts can be injected into the JavaMelody monitoring interface. This occurs if the application improperly sanitizes user inputs displayed on the dashboard. Exploiting this vulnerability allows attackers to execute scripts in a victim's browser, potentially leading to data theft or session hijacking. Patching and input validation are essential to mitigate this risk."
  details: "A JavaMelody Cross-Site Scripting (XSS) Vulnerability arises when JavaMelody's monitoring interface fails to sanitize or escape user-supplied input properly. Attackers can exploit this by injecting malicious scripts into parameters or logs displayed on the interface. When an admin or user views the compromised page, the injected script executes in their browser, potentially exposing sensitive data or allowing session hijacking. Such vulnerabilities highlight the importance of applying security patches and implementing proper input sanitization."
  impact: "The impact of a JavaMelody Cross-Site Scripting (XSS) Vulnerability can be significant, as it allows attackers to execute malicious scripts in the browser of an admin or user viewing the monitoring dashboard. This can lead to theft of sensitive data, session hijacking, or unauthorized actions within the application. In environments with critical monitoring setups, such an exploit can compromise the integrity of application performance data and overall system security."
  category:
    name: XSS
    shortName: XSS
    displayName: Cross-site scripting (XSS)
  subCategory: JAVAMELODY_XSS
  severity: LOW
  references:
    - "https://owasp.org/www-community/attacks/xss/"
    - "https://hackerone.com/reports/840759"
  cwe:
    - CWE-79
  cve:
    - CVE-2019-10092



settings:
  nature: INTRUSIVE
  plan: PRO
  duration: FAST
api_selection_filters:
  method:
    neq: "OPTIONS"
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0
wordLists:
  paths:
    - '/monitoring?part=graph&graph=usedMemory%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E'
execute:
  type: single
  requests:
    - req:
        - modify_url: "${paths}"
        - modify_method: GET
        - replace_body: '{}'
validate:
  response_code:
    eq: 200
  response_payload:
    length:
      gt: 0
    contains_either: "</script><script>alert(document.domain)</script>"
  response_headers:
    for_one:
      key:
        eq: "content-type"
      value:
        eq: "text/html"
strategy:
  run_once: /
