id: BFLA_INSERT_ADMIN_IN_URL_PATHS
info:
  name: "Broken Function Level Authorization - Vertical Privilege Escalation test 
  by concatenating URL subpaths with admin keyword for new URL path identification"
  description: > 
    "In this test, attackers manipulate URL paths by concatenating URL subpaths 
    with "admin" keywords to access privileged functionalities. This tactic 
    aims to bypass access controls and gain unauthorized entry to 
    administrative features or sensitive data. By exploiting this 
    vulnerability, attackers can escalate their privileges within the 
    system and potentially compromise its security."
  details: >
    In this test, attackers exploit weaknesses in function level authorization by 
    altering URL subpaths with keywords like "admin" to access privileged 
    functionalities. By concatenating specific subpaths, they attempt to 
    bypass access controls and gain unauthorized entry to administrative 
    features or sensitive areas of the application. This tactic aims to 
    escalate privileges within the system, potentially compromising its 
    security and allowing for unauthorized access to critical resources."
  impact: >
    "The impact of this test can be significant. Attackers can exploit this 
    vulnerability to gain unauthorized access to privileged functionalities, 
    leading to data breaches, system compromise, and unauthorized actions. 
    This can result in the exposure of sensitive information, compromise of 
    user accounts, and damage to the organization's reputation and trust."
  remediation: "To remediate URL path manipulation vulnerabilities, enforce strict server-side validation of user roles and permissions for all URL paths. Implement a whitelist of allowed paths and ensure that access control mechanisms are not bypassable by simply modifying the URL."

  category:
    name: BFLA
    shortName: Broken Function Level Authorization
    displayName: Broken Function Level Authorization (BFLA)
  subCategory: BFLA_INSERT_ADMIN_IN_URL_PATHS
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/API-Security/editions/2023/en/0xa5-broken-function-level-authorization/"
    - "https://github.com/OWASP/API-Security/blob/master/editions/2023/en/0xa5-broken-function-level-authorization.md"
  cwe:
    - CWE-285
  cve:
    - CVE-2022-48341
auth:
  authenticated: true
api_selection_filters:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    length:
      gt: 0

execute:
  type: multiple
  requests:
    - req:
      - modify_header:
          ${roles_access_context.MEMBER}: 1
      - modify_url:
          token_insert:
            location: 1
            replace_with: "admin"
      - success: vulnerable
      - failure: x2
    - req:
      - modify_header:
          ${roles_access_context.MEMBER}: 1
      - modify_url:
          token_insert:
            location: 2
            replace_with: "admin"
      - success: vulnerable
      - failure: x3
    - req:
      - modify_header:
          ${roles_access_context.MEMBER}: 1
      - modify_url:
          token_insert:
            location: 3
            replace_with: "admin"
      - success: vulnerable
      - failure: x4
    - req:
      - modify_header:
          ${roles_access_context.MEMBER}: 1
      - modify_url:
          token_insert:
            location: 4
            replace_with: "admin"
      - success: vulnerable
      - failure: x5
    - req:
      - modify_header:
          ${roles_access_context.MEMBER}: 1
      - modify_url:
          token_insert:
            location: 5
            replace_with: "admin"
validate:
  response_code:
    gte: 200
    lt: 300
  url:
    endpoint_in_traffic_context: false 
  response_payload:
    length:
      gt: 0
    percentage_match:
      lt: 10
    percentage_match_schema:
      gte: 90